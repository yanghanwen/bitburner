{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":64,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.1046221254112045,\"hacking_speed_mult\":1.1046221254112045,\"hacking_money_mult\":1.1046221254112045,\"hacking_grow_mult\":1.1046221254112045,\"hacking_exp\":2642.5145066282307,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.1046221254112045,\"strength_mult\":1.1046221254112045,\"defense_mult\":1.1046221254112045,\"dexterity_mult\":1.1046221254112045,\"agility_mult\":1.1046221254112045,\"charisma_mult\":1.1046221254112045,\"hacking_exp_mult\":1.1046221254112045,\"strength_exp_mult\":1.1046221254112045,\"defense_exp_mult\":1.1046221254112045,\"dexterity_exp_mult\":1.1046221254112045,\"agility_exp_mult\":1.1046221254112045,\"charisma_exp_mult\":1.1046221254112045,\"company_rep_mult\":1.1046221254112045,\"faction_rep_mult\":1.1046221254112045,\"money\":200871.13169461052,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":3298.999999999233,\"ram\":1,\"totalMoneyGenerated\":13786.32582429265,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2449.399999999945,\"ram\":1,\"totalMoneyGenerated\":10235.897688396666,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2449.1999999999452,\"ram\":1,\"totalMoneyGenerated\":10235.061900229082,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2448.9999999999454,\"ram\":1,\"totalMoneyGenerated\":10234.226112061498,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2448.7999999999456,\"ram\":1,\"totalMoneyGenerated\":10233.390323893915,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2448.7999999999456,\"ram\":1,\"totalMoneyGenerated\":10233.390323893915,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2448.599999999946,\"ram\":1,\"totalMoneyGenerated\":10232.55453572633,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2448.399999999946,\"ram\":1,\"totalMoneyGenerated\":10231.718747558747,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2448.199999999946,\"ram\":1,\"totalMoneyGenerated\":10230.882959391163,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.178940837916972,\"onlineTimeSeconds\":2447.9999999999463,\"ram\":1,\"totalMoneyGenerated\":10230.04717122358,\"name\":\"hacknet-node-9\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1046221254112045,\"crime_success_mult\":1.1046221254112045,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":600000,\"work_money_mult\":1.1046221254112045,\"hacknet_node_money_mult\":2.7859605586113148,\"hacknet_node_purchase_cost_mult\":0.6918522873817353,\"hacknet_node_ram_cost_mult\":0.9043820750088043,\"hacknet_node_core_cost_mult\":0.9043820750088043,\"hacknet_node_level_cost_mult\":0.7687247637574837,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1641315978199,\"totalPlaytime\":178280200,\"playtimeSinceLastAug\":3319600,\"playtimeSinceLastBitnode\":178280200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":475392.2236205064,\"hacknet\":105883.49558634634,\"hacknet_expenses\":-381404.58751178393,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":199871.13169461052,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-187536,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":442430822.94636405,\"hacknet\":4913859451.630506,\"hacknet_expenses\":-3329406485.741625,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":162247156.40844896,\"work\":6991276.283675654,\"servers\":-186945391.88581172,\"other\":-5600000,\"augmentations\":-1678894980.7837863}},\"scriptProdSinceLastAug\":461912,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"0.9.0.2\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe-16.94%-INC\"],\"ramUsed\":127.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",75000000,10],\"dataMap\":{},\"filename\":\"hack2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":198.20999999999728,\"pid\":61,\"ramUsage\":2.2,\"server\":\"home\",\"threads\":58,\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///8a8a0fb2-e142-46d6-bfaa-db93c810abf4\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n *  1.需要保证拥有ROOT权限\\n *  2.需要保证目标机RAM是空的\\n * **/\\nexport async function main(ns) {\\n\\tvar target =ns.args[0];//目标主机\\n\\tvar host = ns.getHostname();//自身（有可能和目标是同一个）\\n\\n\\tvar serverMoney = ns.getServerMaxMoney(target) * 0.75;//让金钱处于最大值的75%\\n\\tvar serverTresh = ns.getServerMinSecurityLevel(target) + 5;//降低到最小安保等级\\n \\n\\tvar ramCost = ns.getScriptRam('hack2.js');\\n\\t//把目标机的RAM吃光\\n\\tvar ownRam = ns.getServerMaxRam(host);\\n\\tvar thread = Math.floor(ownRam/ramCost);\\n \\n\\tns.tprintf(\\\" *************  hack 脚本成功在 %s 中执行，攻击目标为: %s ,即将启用hack2.js\\\",ns.getHostname(),target);\\n\\t\\n\\t//在本机执行hack2.js ,对目标机进行骇入(可以是自己)\\n\\tns.spawn('hack2.js',thread,target,serverMoney,serverTresh);\\n\\n}\",\"filename\":\"hack1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack1.js\",\"url\":\"blob:file:///3f699c4a-58a6-4494-a215-e9ec34912035\"}],\"ramUsage\":4,\"server\":\"home\",\"_hash\":\"eebc52030b21d177fc413efb0d38984027b9f78fc6a12c6c3a1f974724021563\",\"moduleSequenceNumber\":1566}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar servers = ns.getPurchasedServers();\\n\\tfor(var i =0;i<servers.length;++i)\\n\\t{\\n\\t\\tvar host = servers[i];\\n\\t\\tns.killall(host);\\n\\t\\tif(ns.deleteServer(host)){\\n\\t\\t\\tns.tprintf(\\\"删除服务器 %s\\\",host);\\n\\t\\t}else{\\n\\t\\t\\tns.tprintf(\\\"删除服务器失败\\\");\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"delServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"delServers.js\",\"url\":\"blob:file:///8fd7e714-98bb-46e4-a525-1662c30887e4\"}],\"ramUsage\":6.6,\"server\":\"home\",\"_hash\":\"15b451cba77a0291be03787a53255acb475a29c46071a0ee74975c3aab60229e\",\"moduleSequenceNumber\":76}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    //自动购买服务器 \\n    var ram = ns.args[0];//核心数量\\n\\n    var i = 0;\\n    var limit = ns.getPurchasedServerLimit(); \\n    while(i<limit)\\n    {\\n        await ns.sleep(10);\\n        if(ns.getServerMoneyAvailable('home')>ns.getPurchasedServerCost(ram))\\n        {\\n            var name = \\\"pserv-\\\" + i;\\n            var host = ns.purchaseServer(name,ram);\\n            if(host==\\\"\\\")\\n            {\\n                ns.tprintf(\\\"购买%s失败\\\",name);\\n            }\\n            else\\n            {\\n                ns.tprintf(\\\"购买%s成功\\\",name);      \\n            }\\n            i = i+1;\\n        }\\n    }\\n}\",\"filename\":\"initServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"initServers.js\",\"url\":\"blob:file:///6243ea3c-481f-499a-84f4-9a50b18d0277\"}],\"ramUsage\":4.25,\"server\":\"home\",\"_hash\":\"7bfe1371ef8530125da66a26c9339e87389b5bf056b04f17df23969a1454c9c1\",\"moduleSequenceNumber\":1564}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var scripts = [ \\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\\"server1.js\\\"];\\n\\n/** \\n * @param {NS} ns \\n * \\n * （在home)一键部署所有（已拥有的）服务器\\n * **/\\nexport async function main(ns) { \\n\\tvar target = ns.args[0];//执行目标 \\n\\n\\tvar servers = ns.getPurchasedServers();\\n\\tfor(var i = 0;i<servers.length;++i)\\n\\t{\\n\\t\\tvar serverName = servers[i];\\n\\t\\t\\n\\t\\t//停止正在运行的脚本\\n\\t\\tns.killall(serverName); \\n\\n\\t\\tfor(var j in scripts)\\n\\t\\t{\\n\\t\\t\\tvar script = scripts[j];\\n\\t\\t\\tawait ns.scp(script,'home',serverName);  \\n\\t\\t\\tns.tprintf(\\\"拷贝 %s 到 %s \\\",script,serverName); \\n\\t\\t}\\n\\t\\t\\n        await ns.exec('server1.js',serverName,1,target);  \\n\\t}\\n}\",\"filename\":\"execServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execServers.js\",\"url\":\"blob:file:///bd8daed4-9526-4dec-9812-2d424242e682\"}],\"ramUsage\":6.25,\"server\":\"home\",\"_hash\":\"bca3daf0518a13e436ae06b3b6060d8d616be7a8c3241c6e014a7ca7b9ea7f69\",\"moduleSequenceNumber\":1565}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as util from \\\"hackUtils.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.tprint(\\\"start\\\");\\n\\tawait ns.exec(\\\"test2.js\\\",\\\"n00dles\\\");\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackUtils.js\",\"url\":\"blob:file:///1aa949bc-cd56-49c6-8efa-08a45fb35c12\"},{\"filename\":\"test.js\",\"url\":\"blob:file:///d997c831-bcfa-4266-aa06-417956630595\"}],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"afc540fc610a6042f4ce7fd15a45eac3fffdc4da0932af33ffec8e9ef139a293\",\"moduleSequenceNumber\":79}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//自动购买升级骇客节点\\n\\t\\n\\t//购买倍率\\n\\tvar lvStep = 5;\\n\\tvar ramStep = 1;\\n\\tvar coreStep =1;\\n\\n\\t//当前骇客节点数量\\n\\tvar cnt = ns.hacknet.numNodes();\\n\\n\\twhile(true){\\n\\t\\tfor(var i=0;i<cnt;++i)\\n\\t\\t{ \\n\\t\\t\\tvar levelUpCost = ns.hacknet.getLevelUpgradeCost(i,lvStep);\\n\\t\\t\\tvar ramUpCost = ns.hacknet.getRamUpgradeCost(i,ramStep);\\n\\t\\t\\tvar coreUpCost = ns.hacknet.getCoreUpgradeCost(i,coreStep);\\n\\n\\t\\t\\tif(cnt< ns.getPurchasedServerLimit()){\\n\\t\\t\\t\\t//取出三种升级的最小值，当购买新节点只用花费很少一部分钱时，买一个新的节点\\n\\t\\t\\t\\tvar minCost = Math.min(levelUpCost,ramUpCost,coreUpCost);\\n\\t\\t\\t\\tvar newCost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\t\\tif(newCost<minCost * 5 && ns.getServerMoneyAvailable('home')>newCost)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\t\\tcnt+=1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n \\n\\t\\t\\tif(ns.getServerMoneyAvailable('home')>levelUpCost)\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.hacknet.upgradeLevel(i,lvStep);\\n\\t\\t\\t}\\n\\t\\t\\tif(ns.getServerMoneyAvailable('home')>ramUpCost)\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.hacknet.upgradeRam(i,ramStep);\\n\\t\\t\\t}\\n\\t\\t\\tif(ns.getServerMoneyAvailable('home')>coreUpCost)\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.hacknet.upgradeCore(i,coreStep);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(300);\\n\\t}\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///e6a09aa8-1616-4099-b0bb-c39eae35140f\"}],\"ramUsage\":5.75,\"server\":\"home\",\"_hash\":\"56cad0bc51ab0c3b0dd0d503f3a7a9b859b18a99d4ebe87e3f7b47d10c620f96\",\"moduleSequenceNumber\":80}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.write('test.txt',\\\"asdasdasdasd\\\",'w');    \\n}\",\"filename\":\"test1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test1.js\",\"url\":\"blob:file:///88956419-f21a-4eb3-ae0b-ae49ed3d9d0b\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"eeaabba0edb8762ff3a36799d904d9dd948ed004e1067dd75dff73d64e82b838\",\"moduleSequenceNumber\":81}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//定义你需要指定的程序\\n//会按照数组顺序依次执行\\n//如果不存在则不会执行\\nvar utils = [\\\"BruteSSH.exe\\\",\\\"FTPCrack.exe\\\",\\\"relaySMTP.exe\\\",\\\"HTTPWorm.exe\\\",\\\"SQLInject.exe\\\",\\\"NUKE.exe\\\"];\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns  \\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.args[0];  \\n\\troot(ns,host); \\n}\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns \\n * @param host 目标主机 \\n **/\\nfunction root(ns , host)\\n{ \\n\\tns.print(\\\"尝试使用所有程序 at \\\",host);\\n\\tfor(var i in utils)\\n\\t{\\n\\t\\t runFile(ns , utils[i] , host);\\n\\t} \\n}\\n\\n/** \\n * 尝试对目标使用指定程序\\n * @param {NS} ns \\n * @param file 指定程序 \\n * @param host 目标主机 \\n **/\\nfunction runFile(ns , file , host)\\n{ \\n\\tvar flag = true;\\n\\n\\t//file 理论上应该是home拥有了就可以使用\\n\\tif(utils.includes(file) && ns.fileExists(file,'home'))\\n\\t{\\n\\t\\tns.print(\\\"尝试使用程序\\\",file);\\n\\n\\t\\tswitch(file)\\n\\t\\t{\\n\\t\\t\\tcase \\\"NUKE.exe\\\":{\\n\\t\\t\\t\\tif(isPortOpen(ns,host))\\n\\t\\t\\t\\t{\\n\\t\\t\\t \\t\\tns.nuke(host);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.tprintf(\\\"端口不满足NUKE运行条件\\\");\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"BruteSSH.exe\\\":{\\n\\t\\t\\t\\tns.brutessh(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"FTPCrack.exe\\\":{\\n\\t\\t\\t\\tns.ftpcrack(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"relaySMTP.exe\\\":{\\n\\t\\t\\t\\tns.relaysmtp(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"HTTPWorm.exe\\\":{\\n\\t\\t\\t\\tns.httpworm(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"SQLInject.exe\\\":{\\n\\t\\t\\t\\tns.sqlinject(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t{\\n\\t\\t\\t\\tflag=false; \\n\\t\\t\\t}break;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tflag=false;\\n\\t}\\n\\n\\tif(flag)\\n\\t{ \\n\\t\\tns.tprintf(\\\"[%s] run [%s] 成功\\\",host,file);  \\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprintf(\\\"[%s] run [%s] 失败\\\",host,file);   \\n\\t}\\n\\treturn flag;\\n}\\n \\n/** \\n * 目标的端口是否满足需要\\n * @param {NS} ns  \\n * @param host 目标主机 \\n **/\\nfunction isPortOpen(ns,host)\\n{ \\n\\tvar server = ns.getServer(host);\\n\\treturn server.openPortCount>=server.numOpenPortsRequired; \\n}\",\"filename\":\"root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"root.js\",\"url\":\"blob:file:///648dccf7-b3f6-4cab-9a3e-0da0777fae37\"}],\"ramUsage\":4,\"server\":\"home\",\"_hash\":\"a6d9c2c80701c3a5c6ebb6fbd95e694a4fe88093c32da6c2ec9ef380c2b1f19c\",\"moduleSequenceNumber\":1211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\treturn \\\"Hello World;;';\\\";\\n}\",\"filename\":\"test2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test2.js\",\"url\":\"blob:file:///026e5752-6457-4334-b20b-8efb31cb6acc\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"a670a0d0ee075e043fd50a89eae97aee0485a52771a76540b8deb7df38087783\",\"moduleSequenceNumber\":83}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 以指定的参数运行三大函数\\n * **/\\nexport async function main(ns) { \\n\\n\\tvar target = ns.args[0];\\n\\tvar serverMoney = ns.args[1];\\n\\tvar serverTresh = ns.args[2];  \\n\\n\\tns.tprintf(\\\"开始对 %s 执行 hack2.js , 保证资金>%s , 保证安保等级<%s\\\",target,serverMoney,serverTresh)\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target)>serverTresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target); \\n\\t\\t}\\n\\t\\telse if(ns.getServerMoneyAvailable(target)<serverMoney)\\n\\t\\t{ \\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///6afe64c7-ab10-41a1-8a57-07cc6492ff63\"}],\"ramUsage\":2.2,\"server\":\"home\",\"_hash\":\"de9390fe4cda7d048019479a89954cbf5c3dfc6202d5eb06f9a0442bb352ef34\",\"moduleSequenceNumber\":1789}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 需要拥有：\\n * \\n * root.js\\n * \\n * 攻击脚本\\n * \\thack1.js\\n *  hack2.js\\n * \\n * **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\tawait ns.run('root.js',1,target); \\n\\tawait ns.run('hack1.js',1,target);\\n}\",\"filename\":\"server1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"d0d7ce9bfd1e4f24b34b66a8589064d8562713d03df684d7eeceecf67d3f5c7b\",\"moduleSequenceNumber\":85}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var require = [\\n\\t//基本工具\\n\\t\\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\n\\t//二次封装\\n\\t\\\"scan_copy.js\\\",\\n\\t\\\"scan_root.js\\\",\\n\\t\\\"scan_run_hack.js\\\",\\n\\t\\\"scan_virus.js\\\",\\n\\t\\\"scan_virus2.js\\\",\\n\\t//库函数 \\n\\t//\\\"func1.js\\\",\\n\\t];\\n\\n/**\\n *  @param {NS} ns \\n * \\n *  对周边节点拷贝需要的\\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor(var j in require)\\n\\t\\t{\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{  \\n\\t\\t\\t\\tns.tprintf(\\\"拷贝 %s ====> %s 失败，目标无ROOT权限\\\",host,serverName);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar s = require[j]; \\n\\t\\t\\tawait ns.scp(s,host,serverName); \\n\\t\\t}\\n \\n\\t\\tns.tprintf(\\\"拷贝结束 %s ====> %s \\\",host,serverName);\\n\\t\\t// ns.run(callback,1,ns.args); \\n\\t}\\n\\n}\",\"filename\":\"scan_copy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_copy.js\",\"url\":\"blob:file:///15cf5a39-ddee-4e83-b486-93e0b0be32a4\"}],\"ramUsage\":2.5,\"server\":\"home\",\"_hash\":\"6f66ec531facf3571c7ebbb40d2cf81ce443af52e56feefab47378fe94a058c9\",\"moduleSequenceNumber\":1212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对宿主机进行hack流程\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tns.kill('hack1.js',host);\\n\\tns.exec('hack1.js',host,1,host);   \\n\\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\n\\t// var all = ns.scan();\\n\\t// for(var i in all)\\n\\t// {\\n\\t// \\tvar serverName = all[i];\\n\\t// \\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\t\\t\\n\\t// \\tif(serverName=='home')\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t// \\t\\tcontinue;\\n\\t// \\t}\\n\\n\\t// \\tif(ns.hasRootAccess(serverName))\\n\\t// \\t{\\n\\t// \\t\\t// ns.killall(serverName);\\n\\t\\t\\t\\n\\t// \\t\\tns.kill('hack1.js',serverName);\\n\\t// \\t\\tns.exec('hack1.js',serverName,1,serverName); \\n\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行成功，%s ====> %s\\\",host,serverName);\\n\\t// \\t}else\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行失败，无ROOT权限，%s ====> %s\\\",host,serverName);\\n\\t// \\t}\\n\\t// }\\n\\n}\",\"filename\":\"scan_run_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan_run_hack.js\",\"url\":\"blob:file:///cf12e181-a0db-4099-a342-ff2cefbe320b\"}],\"ramUsage\":3.45,\"server\":\"home\",\"_hash\":\"53a15f23244e3f6c9fc5544c249339574b78521a8a9371bae1e4b57086d37c6d\",\"moduleSequenceNumber\":87}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对本机周边所有节点进行root\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\tvar root = [];\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"对未获取ROOT权限的目标 [ %s ] 进行破解…\\\",serverName);\\n\\n\\t\\t\\tns.run(\\\"root.js\\\",1,serverName);\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"%s root权限 已获取失败\\\",serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"%s root权限 已获取\\\",serverName); \\n\\t\\t\\troot.push(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"scan_root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_root.js\",\"url\":\"blob:file:///21c5e40e-9403-42b9-a869-f441f5b475c4\"}],\"ramUsage\":2.9,\"server\":\"home\",\"_hash\":\"575ec2eaa8977f12e23c92e2a73a61e0338275146af4e5b66fa920cfa6ca2001\",\"moduleSequenceNumber\":1210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar runCode = ns.args[0]; //必须指定一个特征码,否则会无限循环\\n\\t\\n\\tif(ns.args.length == 0)\\n\\t{ \\n\\t\\tns.tprintf(\\\"params error\\\");  \\n\\t\\treturn;\\n\\t}\\n\\n\\tvar host = ns.getHostname();\\n\\n\\tif(ns.fileExists(\\\"_lock.txt\\\"))\\n\\t{\\n\\t\\tvar code = ns.read(\\\"_lock.txt\\\");\\n\\t\\tif(code == runCode)\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"锁定中 %s \\\",host);  \\n\\t\\t\\treturn;\\n\\t\\t}else\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"===============>>>> %s 未锁定 , code=%s , runCode=%s \\\",host,code,runCode);  \\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.write(\\\"_lock.txt\\\",runCode,\\\"w\\\");\\n \\n\\tns.tprintf(\\\"============================ ROOT %s  ============================ \\\",host,runCode); \\n\\tns.run(\\\"scan_root.js\\\");\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ COPY %s  ============================ \\\",host,runCode); \\n\\tns.run('scan_copy.js');\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ DIFFUSE %s  ============================ \\\",host,runCode); \\n\\tvar root = ns.scan(host);\\n\\tvar purchasedServer = ns.getPurchasedServers();\\n\\tfor(var i in root)\\n\\t{ \\n\\t\\tvar serverName = root [i];\\n\\n\\t\\tif(ns.isRunning('scan_virus.js',serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略已执行 scan_virus.js 的目标 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(purchasedServer.includes(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略自身服务器 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.tprintf(\\\"处理目标机 %s ====> %s\\\",host,serverName); \\n \\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n \\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\t//kill\\n\\t\\t\\tns.killall(serverName);\\n\\n\\t\\t\\tvar pid = ns.exec('scan_virus.js',serverName,1,runCode);\\n\\t\\t\\tif(pid !=0)\\n\\t\\t\\t{ \\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 成功 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 失败，可能因为RAM不足 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"在目标机链式执行失败，无ROOT权限 %s ====> %s\\\",host,serverName); \\n\\t\\t} \\n\\t}\\n\\t\\n\\t\\n\\tif(host!='home')\\n\\t{\\n\\t\\tns.tprintf(\\\"============================ HACK %s  ============================ \\\",host); \\n\\t\\tns.run('hack1.js',1,host);\\n\\t\\tawait ns.sleep(1000);\\n\\t} \\n}\",\"filename\":\"scan_virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_virus.js\",\"url\":\"blob:file:///ba887678-e0ef-4cf1-8072-5c8efae1d724\"}],\"ramUsage\":7.15,\"server\":\"home\",\"_hash\":\"06a21d5c8d2cf7bf14ce9c8a911556952e8bedad9922839fbfdb96bf041a8fac\",\"moduleSequenceNumber\":1450}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * \\n * 单个参数的库函数\\n * 调用完毕后需要让线程等待一定时间，避免并发\\n **/\\nexport async function main(ns) {\\n\\tvar func = ns.args[0];\\n\\tvar param = ns.args[1];\\n\\tvar p = ns.args[2]; \\n\\t\\n\\tswitch(func)\\n\\t{\\n\\t\\tcase \\\"hasRootAccess\\\":{ \\n\\t\\t\\tvar s = Bool2String(ns.hasRootAccess(param)); \\n\\t\\t\\tawait ns.writePort(p,s); \\n\\t\\t}break;\\n\\t} \\n}\\n\\nfunction Bool2String(boolValue)\\n{\\n\\tif(boolValue)\\n\\t{\\n\\t\\treturn \\\"true\\\";\\n\\t}else\\n\\t{\\n\\t\\treturn \\\"false\\\";\\n\\t}\\n}\",\"filename\":\"func1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"func_1.js\",\"url\":\"blob:file:///d5eec1af-b2fe-4e8c-b7f4-125d7b0408af\"}],\"ramUsage\":1.65,\"server\":\"home\",\"_hash\":\"9b9c62e2df40df8e01133044b87af5bd0723095415ca71890af2e12ab400ae2d\",\"moduleSequenceNumber\":90}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns \\n * \\n **/\\nexport async function main(ns) {\\n\\tvar func = ns.args[0];\\n\\tvar arg1 = ns.args[1];\\n\\tvar port = ns.args[2];\\n\\n\\tswitch(func)\\n\\t{\\n\\t\\tcase \\\"hasRootAccess\\\":{\\n\\t\\t\\tvar a = ns.hasRootAccess(arg1);\\n\\t\\t\\tns.writePort(port,a);\\n\\t\\t}break;\\n\\t}\\n}\",\"filename\":\"func.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.65,\"server\":\"home\",\"_hash\":\"4079a69663ff0ad8038bdc8f52bd3b85683da9a00b7d71b9d1394b01291094ef\",\"moduleSequenceNumber\":91}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"scan_virus2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":92}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"test.txt\",\"text\":\"asdasdasdasd\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"_lock.txt\",\"text\":\"12334\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.6960000000000006,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"60.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":50505503264,\"moneyMax\":1262637581600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1361,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"1.0.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51319153291,\"moneyMax\":1282978832275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1335,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"10.3.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":19063104211,\"moneyMax\":476577605275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1032,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"16.3.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":32328099569,\"moneyMax\":808202489225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1163,\"serverGrowth\":59}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"13.2.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33101561574,\"moneyMax\":827539039350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1229,\"serverGrowth\":67}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"38.4.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":22795734802,\"moneyMax\":569893370050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1063,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"5.5.4.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":17180191487,\"moneyMax\":429504787175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1046,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"13.3.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":21846186839,\"moneyMax\":546154670975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1179,\"serverGrowth\":95}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"23.1.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":25083100889,\"moneyMax\":627077522225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1084,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731747.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,1,1,0,0,0],[0,0,0,1,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"73.9.8.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1742730948,\"moneyMax\":43568273700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1170,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"8.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1527,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"41.4.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1150599432,\"moneyMax\":28764985800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":912,\"serverGrowth\":77}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-114761.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"59.9.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":823915775,\"moneyMax\":20597894375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":987,\"serverGrowth\":69}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"26.6.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":751962444,\"moneyMax\":18799061100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":45}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"40.1.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":740706870,\"moneyMax\":18517671750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":75}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"91.7.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":769830770,\"moneyMax\":19245769250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":61}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"25.9.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":955357510,\"moneyMax\":23883937750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":916,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"43.6.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1112518240,\"moneyMax\":27812956000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"57.1.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":890876672,\"moneyMax\":22271916800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":68}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"91.1.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":646202160,\"moneyMax\":16155054000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":88}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"25.8.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":830991921,\"moneyMax\":20774798025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":937,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"44.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":830037109,\"moneyMax\":20750927725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":90}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"9.7.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1120617087,\"moneyMax\":28015427175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":867,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"75.5.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":917036533,\"moneyMax\":22925913325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"57.5.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":983790013,\"moneyMax\":24594750325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"71.7.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":888169743,\"moneyMax\":22204243575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"95.0.2.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":760780513,\"moneyMax\":19019512825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"17.4.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1609402341,\"moneyMax\":40235058525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":70}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"44.2.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1500173300,\"moneyMax\":37504332500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":779,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"42.2.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1189702277,\"moneyMax\":29742556925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"28.8.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1468957812,\"moneyMax\":36723945300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"63.7.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1052690113,\"moneyMax\":26317252825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"97.3.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":775412903,\"moneyMax\":19385322575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":723,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"90.4.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":676172200,\"moneyMax\":16904305000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":478,\"serverGrowth\":52}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"39.7.5.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":718617822,\"moneyMax\":17965445550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":548,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"6.2.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":306858797,\"moneyMax\":7671469925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":449,\"serverGrowth\":30}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"44.8.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":237167329,\"moneyMax\":5929183225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":370,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"43.8.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"rho-construction\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":982716571,\"moneyMax\":24567914275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":736,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"23.4.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":338983048,\"moneyMax\":8474576200,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":437,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"61.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":505488015,\"moneyMax\":12637200375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":595,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"16.5.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":322930077,\"moneyMax\":8073251925,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":418,\"serverGrowth\":52}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"6.5.4.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":179440768,\"moneyMax\":4486019200,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":296,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"6.3.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":246040741,\"moneyMax\":6151018525,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":327,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"38.3.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":415,\"serverGrowth\":52}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"91.0.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":78037045,\"moneyMax\":1950926125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":275,\"serverGrowth\":52}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"53.4.7.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//定义你需要指定的程序\\n//会按照数组顺序依次执行\\n//如果不存在则不会执行\\nvar utils = [\\\"BruteSSH.exe\\\",\\\"FTPCrack.exe\\\",\\\"relaySMTP.exe\\\",\\\"HTTPWorm.exe\\\",\\\"SQLInject.exe\\\",\\\"NUKE.exe\\\"];\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns  \\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.args[0];  \\n\\troot(ns,host); \\n}\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns \\n * @param host 目标主机 \\n **/\\nfunction root(ns , host)\\n{ \\n\\tns.print(\\\"尝试使用所有程序 at \\\",host);\\n\\tfor(var i in utils)\\n\\t{\\n\\t\\t runFile(ns , utils[i] , host);\\n\\t} \\n}\\n\\n/** \\n * 尝试对目标使用指定程序\\n * @param {NS} ns \\n * @param file 指定程序 \\n * @param host 目标主机 \\n **/\\nfunction runFile(ns , file , host)\\n{ \\n\\tvar flag = true;\\n\\n\\t//file 理论上应该是home拥有了就可以使用\\n\\tif(utils.includes(file) && ns.fileExists(file,'home'))\\n\\t{\\n\\t\\tns.print(\\\"尝试使用程序\\\",file);\\n\\n\\t\\tswitch(file)\\n\\t\\t{\\n\\t\\t\\tcase \\\"NUKE.exe\\\":{\\n\\t\\t\\t\\tif(isPortOpen(ns,host))\\n\\t\\t\\t\\t{\\n\\t\\t\\t \\t\\tns.nuke(host);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.tprintf(\\\"端口不满足NUKE运行条件\\\");\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"BruteSSH.exe\\\":{\\n\\t\\t\\t\\tns.brutessh(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"FTPCrack.exe\\\":{\\n\\t\\t\\t\\tns.ftpcrack(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"relaySMTP.exe\\\":{\\n\\t\\t\\t\\tns.relaysmtp(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"HTTPWorm.exe\\\":{\\n\\t\\t\\t\\tns.httpworm(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"SQLInject.exe\\\":{\\n\\t\\t\\t\\tns.sqlinject(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t{\\n\\t\\t\\t\\tflag=false; \\n\\t\\t\\t}break;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tflag=false;\\n\\t}\\n\\n\\tif(flag)\\n\\t{ \\n\\t\\tns.tprintf(\\\"[%s] run [%s] 成功\\\",host,file);  \\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprintf(\\\"[%s] run [%s] 失败\\\",host,file);   \\n\\t}\\n\\treturn flag;\\n}\\n \\n/** \\n * 目标的端口是否满足需要\\n * @param {NS} ns  \\n * @param host 目标主机 \\n **/\\nfunction isPortOpen(ns,host)\\n{ \\n\\tvar server = ns.getServer(host);\\n\\treturn server.openPortCount>=server.numOpenPortsRequired; \\n}\",\"filename\":\"root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"root.js\",\"url\":\"blob:file:///b52c5a36-83c5-4deb-9925-1dedfe824d69\"}],\"ramUsage\":4,\"server\":\"n00dles\",\"_hash\":\"a6d9c2c80701c3a5c6ebb6fbd95e694a4fe88093c32da6c2ec9ef380c2b1f19c\",\"moduleSequenceNumber\":93}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n *  1.需要保证拥有ROOT权限\\n *  2.需要保证目标机RAM是空的\\n * **/\\nexport async function main(ns) {\\n\\tvar target =ns.args[0];//目标主机\\n\\tvar host = ns.getHostname();//自身（有可能和目标是同一个）\\n\\n\\tvar serverMoney = ns.getServerMaxMoney(target) * 0.75;//让金钱处于最大值的75%\\n\\tvar serverTresh = ns.getServerMinSecurityLevel(target) + 5;//降低到最小安保等级\\n \\n\\tvar ramCost = ns.getScriptRam('hack2.js');\\n\\t//把目标机的RAM吃光\\n\\tvar ownRam = ns.getServerMaxRam(host);\\n\\tvar thread = Math.floor(ownRam/ramCost);\\n \\n\\tns.tprintf(\\\" *************  hack 脚本成功在 %s 中执行，攻击目标为: %s ,即将启用hack2.js\\\",ns.getHostname(),target);\\n\\t\\n\\t//在本机执行hack2.js ,对目标机进行骇入(可以是自己)\\n\\tns.spawn('hack2.js',thread,target,serverMoney,serverTresh);\\n\\n}\",\"filename\":\"hack1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"_hash\":\"eebc52030b21d177fc413efb0d38984027b9f78fc6a12c6c3a1f974724021563\",\"moduleSequenceNumber\":94}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 以指定的参数运行三大函数\\n * **/\\nexport async function main(ns) { \\n\\n\\tvar target = ns.args[0];\\n\\tvar serverMoney = ns.args[1];\\n\\tvar serverTresh = ns.args[2];  \\n\\n\\tns.tprintf(\\\"开始对 %s 执行 hack2.js , 保证资金>%s , 保证安保等级<%s\\\",target,serverMoney,serverTresh)\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target)>serverTresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target); \\n\\t\\t}\\n\\t\\telse if(ns.getServerMoneyAvailable(target)<serverMoney)\\n\\t\\t{ \\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.2,\"server\":\"n00dles\",\"_hash\":\"de9390fe4cda7d048019479a89954cbf5c3dfc6202d5eb06f9a0442bb352ef34\",\"moduleSequenceNumber\":95}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var require = [\\n\\t//基本工具\\n\\t\\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\n\\t//二次封装\\n\\t\\\"scan_copy.js\\\",\\n\\t\\\"scan_root.js\\\",\\n\\t\\\"scan_run_hack.js\\\",\\n\\t\\\"scan_virus.js\\\",\\n\\t\\\"scan_virus2.js\\\",\\n\\t//库函数 \\n\\t//\\\"func1.js\\\",\\n\\t];\\n\\n/**\\n *  @param {NS} ns \\n * \\n *  对周边节点拷贝需要的\\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor(var j in require)\\n\\t\\t{\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{  \\n\\t\\t\\t\\tns.tprintf(\\\"拷贝 %s ====> %s 失败，目标无ROOT权限\\\",host,serverName);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar s = require[j]; \\n\\t\\t\\tawait ns.scp(s,host,serverName); \\n\\t\\t}\\n \\n\\t\\tns.tprintf(\\\"拷贝结束 %s ====> %s \\\",host,serverName);\\n\\t\\t// ns.run(callback,1,ns.args); \\n\\t}\\n\\n}\",\"filename\":\"scan_copy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.5,\"server\":\"n00dles\",\"_hash\":\"6f66ec531facf3571c7ebbb40d2cf81ce443af52e56feefab47378fe94a058c9\",\"moduleSequenceNumber\":96}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对本机周边所有节点进行root\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\tvar root = [];\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"对未获取ROOT权限的目标 [ %s ] 进行破解…\\\",serverName);\\n\\n\\t\\t\\tns.run(\\\"root.js\\\",1,serverName);\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"%s root权限 已获取失败\\\",serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"%s root权限 已获取\\\",serverName); \\n\\t\\t\\troot.push(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"scan_root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.9,\"server\":\"n00dles\",\"_hash\":\"575ec2eaa8977f12e23c92e2a73a61e0338275146af4e5b66fa920cfa6ca2001\",\"moduleSequenceNumber\":97}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对宿主机进行hack流程\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tns.kill('hack1.js',host);\\n\\tns.exec('hack1.js',host,1,host);   \\n\\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\n\\t// var all = ns.scan();\\n\\t// for(var i in all)\\n\\t// {\\n\\t// \\tvar serverName = all[i];\\n\\t// \\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\t\\t\\n\\t// \\tif(serverName=='home')\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t// \\t\\tcontinue;\\n\\t// \\t}\\n\\n\\t// \\tif(ns.hasRootAccess(serverName))\\n\\t// \\t{\\n\\t// \\t\\t// ns.killall(serverName);\\n\\t\\t\\t\\n\\t// \\t\\tns.kill('hack1.js',serverName);\\n\\t// \\t\\tns.exec('hack1.js',serverName,1,serverName); \\n\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行成功，%s ====> %s\\\",host,serverName);\\n\\t// \\t}else\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行失败，无ROOT权限，%s ====> %s\\\",host,serverName);\\n\\t// \\t}\\n\\t// }\\n\\n}\",\"filename\":\"scan_run_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"n00dles\",\"_hash\":\"53a15f23244e3f6c9fc5544c249339574b78521a8a9371bae1e4b57086d37c6d\",\"moduleSequenceNumber\":98}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar runCode = ns.args[0]; //必须指定一个特征码,否则会无限循环\\n\\t\\n\\tif(ns.args.length == 0)\\n\\t{ \\n\\t\\tns.tprintf(\\\"params error\\\");  \\n\\t\\treturn;\\n\\t}\\n\\n\\tvar host = ns.getHostname();\\n\\n\\tif(ns.fileExists(\\\"_lock.txt\\\"))\\n\\t{\\n\\t\\tvar code = ns.read(\\\"_lock.txt\\\");\\n\\t\\tif(code == runCode)\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"锁定中 %s \\\",host);  \\n\\t\\t\\treturn;\\n\\t\\t}else\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"===============>>>> %s 未锁定 , code=%s , runCode=%s \\\",host,code,runCode);  \\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.write(\\\"_lock.txt\\\",runCode,\\\"w\\\");\\n \\n\\tns.tprintf(\\\"============================ ROOT %s  ============================ \\\",host,runCode); \\n\\tns.run(\\\"scan_root.js\\\");\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ COPY %s  ============================ \\\",host,runCode); \\n\\tns.run('scan_copy.js');\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ DIFFUSE %s  ============================ \\\",host,runCode); \\n\\tvar root = ns.scan(host);\\n\\tvar purchasedServer = ns.getPurchasedServers();\\n\\tfor(var i in root)\\n\\t{ \\n\\t\\tvar serverName = root [i];\\n\\n\\t\\tif(ns.isRunning('scan_virus.js',serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略已执行 scan_virus.js 的目标 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(purchasedServer.includes(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略自身服务器 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.tprintf(\\\"处理目标机 %s ====> %s\\\",host,serverName); \\n \\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n \\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\t//kill\\n\\t\\t\\tns.killall(serverName);\\n\\n\\t\\t\\tvar pid = ns.exec('scan_virus.js',serverName,1,runCode);\\n\\t\\t\\tif(pid !=0)\\n\\t\\t\\t{ \\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 成功 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 失败，可能因为RAM不足 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"在目标机链式执行失败，无ROOT权限 %s ====> %s\\\",host,serverName); \\n\\t\\t} \\n\\t}\\n\\t\\n\\t\\n\\tif(host!='home')\\n\\t{\\n\\t\\tns.tprintf(\\\"============================ HACK %s  ============================ \\\",host); \\n\\t\\tns.run('hack1.js',1,host);\\n\\t\\tawait ns.sleep(1000);\\n\\t} \\n}\",\"filename\":\"scan_virus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":7.15,\"server\":\"n00dles\",\"_hash\":\"06a21d5c8d2cf7bf14ce9c8a911556952e8bedad9922839fbfdb96bf041a8fac\",\"moduleSequenceNumber\":1451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"scan_virus2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"n00dles\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":100}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.2400000000000002,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"12.6.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",37500000,8],\"dataMap\":{\"foodnstuff\":[0,0,42,0]},\"filename\":\"hack2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":265.1823878018118,\"onlineMoneyMade\":0,\"onlineRunningTime\":460.8099999999824,\"pid\":49,\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///e7659df8-830a-46d7-9673-e2b6362e1678\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//定义你需要指定的程序\\n//会按照数组顺序依次执行\\n//如果不存在则不会执行\\nvar utils = [\\\"BruteSSH.exe\\\",\\\"FTPCrack.exe\\\",\\\"relaySMTP.exe\\\",\\\"HTTPWorm.exe\\\",\\\"SQLInject.exe\\\",\\\"NUKE.exe\\\"];\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns  \\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.args[0];  \\n\\troot(ns,host); \\n}\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns \\n * @param host 目标主机 \\n **/\\nfunction root(ns , host)\\n{ \\n\\tns.print(\\\"尝试使用所有程序 at \\\",host);\\n\\tfor(var i in utils)\\n\\t{\\n\\t\\t runFile(ns , utils[i] , host);\\n\\t} \\n}\\n\\n/** \\n * 尝试对目标使用指定程序\\n * @param {NS} ns \\n * @param file 指定程序 \\n * @param host 目标主机 \\n **/\\nfunction runFile(ns , file , host)\\n{ \\n\\tvar flag = true;\\n\\n\\t//file 理论上应该是home拥有了就可以使用\\n\\tif(utils.includes(file) && ns.fileExists(file,'home'))\\n\\t{\\n\\t\\tns.print(\\\"尝试使用程序\\\",file);\\n\\n\\t\\tswitch(file)\\n\\t\\t{\\n\\t\\t\\tcase \\\"NUKE.exe\\\":{\\n\\t\\t\\t\\tif(isPortOpen(ns,host))\\n\\t\\t\\t\\t{\\n\\t\\t\\t \\t\\tns.nuke(host);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.tprintf(\\\"端口不满足NUKE运行条件\\\");\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"BruteSSH.exe\\\":{\\n\\t\\t\\t\\tns.brutessh(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"FTPCrack.exe\\\":{\\n\\t\\t\\t\\tns.ftpcrack(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"relaySMTP.exe\\\":{\\n\\t\\t\\t\\tns.relaysmtp(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"HTTPWorm.exe\\\":{\\n\\t\\t\\t\\tns.httpworm(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"SQLInject.exe\\\":{\\n\\t\\t\\t\\tns.sqlinject(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t{\\n\\t\\t\\t\\tflag=false; \\n\\t\\t\\t}break;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tflag=false;\\n\\t}\\n\\n\\tif(flag)\\n\\t{ \\n\\t\\tns.tprintf(\\\"[%s] run [%s] 成功\\\",host,file);  \\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprintf(\\\"[%s] run [%s] 失败\\\",host,file);   \\n\\t}\\n\\treturn flag;\\n}\\n \\n/** \\n * 目标的端口是否满足需要\\n * @param {NS} ns  \\n * @param host 目标主机 \\n **/\\nfunction isPortOpen(ns,host)\\n{ \\n\\tvar server = ns.getServer(host);\\n\\treturn server.openPortCount>=server.numOpenPortsRequired; \\n}\",\"filename\":\"root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"_hash\":\"a6d9c2c80701c3a5c6ebb6fbd95e694a4fe88093c32da6c2ec9ef380c2b1f19c\",\"moduleSequenceNumber\":101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n *  1.需要保证拥有ROOT权限\\n *  2.需要保证目标机RAM是空的\\n * **/\\nexport async function main(ns) {\\n\\tvar target =ns.args[0];//目标主机\\n\\tvar host = ns.getHostname();//自身（有可能和目标是同一个）\\n\\n\\tvar serverMoney = ns.getServerMaxMoney(target) * 0.75;//让金钱处于最大值的75%\\n\\tvar serverTresh = ns.getServerMinSecurityLevel(target) + 5;//降低到最小安保等级\\n \\n\\tvar ramCost = ns.getScriptRam('hack2.js');\\n\\t//把目标机的RAM吃光\\n\\tvar ownRam = ns.getServerMaxRam(host);\\n\\tvar thread = Math.floor(ownRam/ramCost);\\n \\n\\tns.tprintf(\\\" *************  hack 脚本成功在 %s 中执行，攻击目标为: %s ,即将启用hack2.js\\\",ns.getHostname(),target);\\n\\t\\n\\t//在本机执行hack2.js ,对目标机进行骇入(可以是自己)\\n\\tns.spawn('hack2.js',thread,target,serverMoney,serverTresh);\\n\\n}\",\"filename\":\"hack1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack1.js\",\"url\":\"blob:file:///3f699c4a-58a6-4494-a215-e9ec34912035\"}],\"ramUsage\":4,\"server\":\"foodnstuff\",\"_hash\":\"eebc52030b21d177fc413efb0d38984027b9f78fc6a12c6c3a1f974724021563\",\"moduleSequenceNumber\":1474}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 以指定的参数运行三大函数\\n * **/\\nexport async function main(ns) { \\n\\n\\tvar target = ns.args[0];\\n\\tvar serverMoney = ns.args[1];\\n\\tvar serverTresh = ns.args[2];  \\n\\n\\tns.tprintf(\\\"开始对 %s 执行 hack2.js , 保证资金>%s , 保证安保等级<%s\\\",target,serverMoney,serverTresh)\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target)>serverTresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target); \\n\\t\\t}\\n\\t\\telse if(ns.getServerMoneyAvailable(target)<serverMoney)\\n\\t\\t{ \\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///6afe64c7-ab10-41a1-8a57-07cc6492ff63\"}],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"_hash\":\"de9390fe4cda7d048019479a89954cbf5c3dfc6202d5eb06f9a0442bb352ef34\",\"moduleSequenceNumber\":1485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var require = [\\n\\t//基本工具\\n\\t\\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\n\\t//二次封装\\n\\t\\\"scan_copy.js\\\",\\n\\t\\\"scan_root.js\\\",\\n\\t\\\"scan_run_hack.js\\\",\\n\\t\\\"scan_virus.js\\\",\\n\\t\\\"scan_virus2.js\\\",\\n\\t//库函数 \\n\\t//\\\"func1.js\\\",\\n\\t];\\n\\n/**\\n *  @param {NS} ns \\n * \\n *  对周边节点拷贝需要的\\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor(var j in require)\\n\\t\\t{\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{  \\n\\t\\t\\t\\tns.tprintf(\\\"拷贝 %s ====> %s 失败，目标无ROOT权限\\\",host,serverName);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar s = require[j]; \\n\\t\\t\\tawait ns.scp(s,host,serverName); \\n\\t\\t}\\n \\n\\t\\tns.tprintf(\\\"拷贝结束 %s ====> %s \\\",host,serverName);\\n\\t\\t// ns.run(callback,1,ns.args); \\n\\t}\\n\\n}\",\"filename\":\"scan_copy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_copy.js\",\"url\":\"blob:file:///15cf5a39-ddee-4e83-b486-93e0b0be32a4\"}],\"ramUsage\":2.5,\"server\":\"foodnstuff\",\"_hash\":\"6f66ec531facf3571c7ebbb40d2cf81ce443af52e56feefab47378fe94a058c9\",\"moduleSequenceNumber\":1468}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对本机周边所有节点进行root\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\tvar root = [];\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"对未获取ROOT权限的目标 [ %s ] 进行破解…\\\",serverName);\\n\\n\\t\\t\\tns.run(\\\"root.js\\\",1,serverName);\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"%s root权限 已获取失败\\\",serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"%s root权限 已获取\\\",serverName); \\n\\t\\t\\troot.push(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"scan_root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_root.js\",\"url\":\"blob:file:///21c5e40e-9403-42b9-a869-f441f5b475c4\"}],\"ramUsage\":2.9,\"server\":\"foodnstuff\",\"_hash\":\"575ec2eaa8977f12e23c92e2a73a61e0338275146af4e5b66fa920cfa6ca2001\",\"moduleSequenceNumber\":1462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对宿主机进行hack流程\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tns.kill('hack1.js',host);\\n\\tns.exec('hack1.js',host,1,host);   \\n\\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\n\\t// var all = ns.scan();\\n\\t// for(var i in all)\\n\\t// {\\n\\t// \\tvar serverName = all[i];\\n\\t// \\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\t\\t\\n\\t// \\tif(serverName=='home')\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t// \\t\\tcontinue;\\n\\t// \\t}\\n\\n\\t// \\tif(ns.hasRootAccess(serverName))\\n\\t// \\t{\\n\\t// \\t\\t// ns.killall(serverName);\\n\\t\\t\\t\\n\\t// \\t\\tns.kill('hack1.js',serverName);\\n\\t// \\t\\tns.exec('hack1.js',serverName,1,serverName); \\n\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行成功，%s ====> %s\\\",host,serverName);\\n\\t// \\t}else\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行失败，无ROOT权限，%s ====> %s\\\",host,serverName);\\n\\t// \\t}\\n\\t// }\\n\\n}\",\"filename\":\"scan_run_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"foodnstuff\",\"_hash\":\"53a15f23244e3f6c9fc5544c249339574b78521a8a9371bae1e4b57086d37c6d\",\"moduleSequenceNumber\":106}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar runCode = ns.args[0]; //必须指定一个特征码,否则会无限循环\\n\\t\\n\\tif(ns.args.length == 0)\\n\\t{ \\n\\t\\tns.tprintf(\\\"params error\\\");  \\n\\t\\treturn;\\n\\t}\\n\\n\\tvar host = ns.getHostname();\\n\\n\\tif(ns.fileExists(\\\"_lock.txt\\\"))\\n\\t{\\n\\t\\tvar code = ns.read(\\\"_lock.txt\\\");\\n\\t\\tif(code == runCode)\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"锁定中 %s \\\",host);  \\n\\t\\t\\treturn;\\n\\t\\t}else\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"===============>>>> %s 未锁定 , code=%s , runCode=%s \\\",host,code,runCode);  \\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.write(\\\"_lock.txt\\\",runCode,\\\"w\\\");\\n \\n\\tns.tprintf(\\\"============================ ROOT %s  ============================ \\\",host,runCode); \\n\\tns.run(\\\"scan_root.js\\\");\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ COPY %s  ============================ \\\",host,runCode); \\n\\tns.run('scan_copy.js');\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ DIFFUSE %s  ============================ \\\",host,runCode); \\n\\tvar root = ns.scan(host);\\n\\tvar purchasedServer = ns.getPurchasedServers();\\n\\tfor(var i in root)\\n\\t{ \\n\\t\\tvar serverName = root [i];\\n\\n\\t\\tif(ns.isRunning('scan_virus.js',serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略已执行 scan_virus.js 的目标 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(purchasedServer.includes(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略自身服务器 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.tprintf(\\\"处理目标机 %s ====> %s\\\",host,serverName); \\n \\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n \\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\t//kill\\n\\t\\t\\tns.killall(serverName);\\n\\n\\t\\t\\tvar pid = ns.exec('scan_virus.js',serverName,1,runCode);\\n\\t\\t\\tif(pid !=0)\\n\\t\\t\\t{ \\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 成功 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 失败，可能因为RAM不足 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"在目标机链式执行失败，无ROOT权限 %s ====> %s\\\",host,serverName); \\n\\t\\t} \\n\\t}\\n\\t\\n\\t\\n\\tif(host!='home')\\n\\t{\\n\\t\\tns.tprintf(\\\"============================ HACK %s  ============================ \\\",host); \\n\\t\\tns.run('hack1.js',1,host);\\n\\t\\tawait ns.sleep(1000);\\n\\t} \\n}\",\"filename\":\"scan_virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_virus.js\",\"url\":\"blob:file:///ba887678-e0ef-4cf1-8072-5c8efae1d724\"}],\"ramUsage\":7.15,\"server\":\"foodnstuff\",\"_hash\":\"06a21d5c8d2cf7bf14ce9c8a911556952e8bedad9922839fbfdb96bf041a8fac\",\"moduleSequenceNumber\":1457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"scan_virus2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"foodnstuff\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":108}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"_lock.txt\",\"text\":\"12334\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.829999999999998,\"minDifficulty\":3,\"moneyAvailable\":2027269.8044590754,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"80.5.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",43125000,8],\"dataMap\":{\"sigma-cosmetics\":[0,0,28,7]},\"filename\":\"hack2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":220.98532316817648,\"onlineMoneyMade\":0,\"onlineRunningTime\":460.8099999999824,\"pid\":48,\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///e7659df8-830a-46d7-9673-e2b6362e1678\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//定义你需要指定的程序\\n//会按照数组顺序依次执行\\n//如果不存在则不会执行\\nvar utils = [\\\"BruteSSH.exe\\\",\\\"FTPCrack.exe\\\",\\\"relaySMTP.exe\\\",\\\"HTTPWorm.exe\\\",\\\"SQLInject.exe\\\",\\\"NUKE.exe\\\"];\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns  \\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.args[0];  \\n\\troot(ns,host); \\n}\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns \\n * @param host 目标主机 \\n **/\\nfunction root(ns , host)\\n{ \\n\\tns.print(\\\"尝试使用所有程序 at \\\",host);\\n\\tfor(var i in utils)\\n\\t{\\n\\t\\t runFile(ns , utils[i] , host);\\n\\t} \\n}\\n\\n/** \\n * 尝试对目标使用指定程序\\n * @param {NS} ns \\n * @param file 指定程序 \\n * @param host 目标主机 \\n **/\\nfunction runFile(ns , file , host)\\n{ \\n\\tvar flag = true;\\n\\n\\t//file 理论上应该是home拥有了就可以使用\\n\\tif(utils.includes(file) && ns.fileExists(file,'home'))\\n\\t{\\n\\t\\tns.print(\\\"尝试使用程序\\\",file);\\n\\n\\t\\tswitch(file)\\n\\t\\t{\\n\\t\\t\\tcase \\\"NUKE.exe\\\":{\\n\\t\\t\\t\\tif(isPortOpen(ns,host))\\n\\t\\t\\t\\t{\\n\\t\\t\\t \\t\\tns.nuke(host);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.tprintf(\\\"端口不满足NUKE运行条件\\\");\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"BruteSSH.exe\\\":{\\n\\t\\t\\t\\tns.brutessh(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"FTPCrack.exe\\\":{\\n\\t\\t\\t\\tns.ftpcrack(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"relaySMTP.exe\\\":{\\n\\t\\t\\t\\tns.relaysmtp(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"HTTPWorm.exe\\\":{\\n\\t\\t\\t\\tns.httpworm(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"SQLInject.exe\\\":{\\n\\t\\t\\t\\tns.sqlinject(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t{\\n\\t\\t\\t\\tflag=false; \\n\\t\\t\\t}break;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tflag=false;\\n\\t}\\n\\n\\tif(flag)\\n\\t{ \\n\\t\\tns.tprintf(\\\"[%s] run [%s] 成功\\\",host,file);  \\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprintf(\\\"[%s] run [%s] 失败\\\",host,file);   \\n\\t}\\n\\treturn flag;\\n}\\n \\n/** \\n * 目标的端口是否满足需要\\n * @param {NS} ns  \\n * @param host 目标主机 \\n **/\\nfunction isPortOpen(ns,host)\\n{ \\n\\tvar server = ns.getServer(host);\\n\\treturn server.openPortCount>=server.numOpenPortsRequired; \\n}\",\"filename\":\"root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"_hash\":\"a6d9c2c80701c3a5c6ebb6fbd95e694a4fe88093c32da6c2ec9ef380c2b1f19c\",\"moduleSequenceNumber\":109}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n *  1.需要保证拥有ROOT权限\\n *  2.需要保证目标机RAM是空的\\n * **/\\nexport async function main(ns) {\\n\\tvar target =ns.args[0];//目标主机\\n\\tvar host = ns.getHostname();//自身（有可能和目标是同一个）\\n\\n\\tvar serverMoney = ns.getServerMaxMoney(target) * 0.75;//让金钱处于最大值的75%\\n\\tvar serverTresh = ns.getServerMinSecurityLevel(target) + 5;//降低到最小安保等级\\n \\n\\tvar ramCost = ns.getScriptRam('hack2.js');\\n\\t//把目标机的RAM吃光\\n\\tvar ownRam = ns.getServerMaxRam(host);\\n\\tvar thread = Math.floor(ownRam/ramCost);\\n \\n\\tns.tprintf(\\\" *************  hack 脚本成功在 %s 中执行，攻击目标为: %s ,即将启用hack2.js\\\",ns.getHostname(),target);\\n\\t\\n\\t//在本机执行hack2.js ,对目标机进行骇入(可以是自己)\\n\\tns.spawn('hack2.js',thread,target,serverMoney,serverTresh);\\n\\n}\",\"filename\":\"hack1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack1.js\",\"url\":\"blob:file:///3f699c4a-58a6-4494-a215-e9ec34912035\"}],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"_hash\":\"eebc52030b21d177fc413efb0d38984027b9f78fc6a12c6c3a1f974724021563\",\"moduleSequenceNumber\":1475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 以指定的参数运行三大函数\\n * **/\\nexport async function main(ns) { \\n\\n\\tvar target = ns.args[0];\\n\\tvar serverMoney = ns.args[1];\\n\\tvar serverTresh = ns.args[2];  \\n\\n\\tns.tprintf(\\\"开始对 %s 执行 hack2.js , 保证资金>%s , 保证安保等级<%s\\\",target,serverMoney,serverTresh)\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target)>serverTresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target); \\n\\t\\t}\\n\\t\\telse if(ns.getServerMoneyAvailable(target)<serverMoney)\\n\\t\\t{ \\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///6afe64c7-ab10-41a1-8a57-07cc6492ff63\"}],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"_hash\":\"de9390fe4cda7d048019479a89954cbf5c3dfc6202d5eb06f9a0442bb352ef34\",\"moduleSequenceNumber\":1484}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var require = [\\n\\t//基本工具\\n\\t\\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\n\\t//二次封装\\n\\t\\\"scan_copy.js\\\",\\n\\t\\\"scan_root.js\\\",\\n\\t\\\"scan_run_hack.js\\\",\\n\\t\\\"scan_virus.js\\\",\\n\\t\\\"scan_virus2.js\\\",\\n\\t//库函数 \\n\\t//\\\"func1.js\\\",\\n\\t];\\n\\n/**\\n *  @param {NS} ns \\n * \\n *  对周边节点拷贝需要的\\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor(var j in require)\\n\\t\\t{\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{  \\n\\t\\t\\t\\tns.tprintf(\\\"拷贝 %s ====> %s 失败，目标无ROOT权限\\\",host,serverName);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar s = require[j]; \\n\\t\\t\\tawait ns.scp(s,host,serverName); \\n\\t\\t}\\n \\n\\t\\tns.tprintf(\\\"拷贝结束 %s ====> %s \\\",host,serverName);\\n\\t\\t// ns.run(callback,1,ns.args); \\n\\t}\\n\\n}\",\"filename\":\"scan_copy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_copy.js\",\"url\":\"blob:file:///15cf5a39-ddee-4e83-b486-93e0b0be32a4\"}],\"ramUsage\":2.5,\"server\":\"sigma-cosmetics\",\"_hash\":\"6f66ec531facf3571c7ebbb40d2cf81ce443af52e56feefab47378fe94a058c9\",\"moduleSequenceNumber\":1469}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对本机周边所有节点进行root\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\tvar root = [];\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"对未获取ROOT权限的目标 [ %s ] 进行破解…\\\",serverName);\\n\\n\\t\\t\\tns.run(\\\"root.js\\\",1,serverName);\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"%s root权限 已获取失败\\\",serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"%s root权限 已获取\\\",serverName); \\n\\t\\t\\troot.push(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"scan_root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_root.js\",\"url\":\"blob:file:///21c5e40e-9403-42b9-a869-f441f5b475c4\"}],\"ramUsage\":2.9,\"server\":\"sigma-cosmetics\",\"_hash\":\"575ec2eaa8977f12e23c92e2a73a61e0338275146af4e5b66fa920cfa6ca2001\",\"moduleSequenceNumber\":1463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对宿主机进行hack流程\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tns.kill('hack1.js',host);\\n\\tns.exec('hack1.js',host,1,host);   \\n\\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\n\\t// var all = ns.scan();\\n\\t// for(var i in all)\\n\\t// {\\n\\t// \\tvar serverName = all[i];\\n\\t// \\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\t\\t\\n\\t// \\tif(serverName=='home')\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t// \\t\\tcontinue;\\n\\t// \\t}\\n\\n\\t// \\tif(ns.hasRootAccess(serverName))\\n\\t// \\t{\\n\\t// \\t\\t// ns.killall(serverName);\\n\\t\\t\\t\\n\\t// \\t\\tns.kill('hack1.js',serverName);\\n\\t// \\t\\tns.exec('hack1.js',serverName,1,serverName); \\n\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行成功，%s ====> %s\\\",host,serverName);\\n\\t// \\t}else\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行失败，无ROOT权限，%s ====> %s\\\",host,serverName);\\n\\t// \\t}\\n\\t// }\\n\\n}\",\"filename\":\"scan_run_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"sigma-cosmetics\",\"_hash\":\"53a15f23244e3f6c9fc5544c249339574b78521a8a9371bae1e4b57086d37c6d\",\"moduleSequenceNumber\":114}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar runCode = ns.args[0]; //必须指定一个特征码,否则会无限循环\\n\\t\\n\\tif(ns.args.length == 0)\\n\\t{ \\n\\t\\tns.tprintf(\\\"params error\\\");  \\n\\t\\treturn;\\n\\t}\\n\\n\\tvar host = ns.getHostname();\\n\\n\\tif(ns.fileExists(\\\"_lock.txt\\\"))\\n\\t{\\n\\t\\tvar code = ns.read(\\\"_lock.txt\\\");\\n\\t\\tif(code == runCode)\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"锁定中 %s \\\",host);  \\n\\t\\t\\treturn;\\n\\t\\t}else\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"===============>>>> %s 未锁定 , code=%s , runCode=%s \\\",host,code,runCode);  \\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.write(\\\"_lock.txt\\\",runCode,\\\"w\\\");\\n \\n\\tns.tprintf(\\\"============================ ROOT %s  ============================ \\\",host,runCode); \\n\\tns.run(\\\"scan_root.js\\\");\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ COPY %s  ============================ \\\",host,runCode); \\n\\tns.run('scan_copy.js');\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ DIFFUSE %s  ============================ \\\",host,runCode); \\n\\tvar root = ns.scan(host);\\n\\tvar purchasedServer = ns.getPurchasedServers();\\n\\tfor(var i in root)\\n\\t{ \\n\\t\\tvar serverName = root [i];\\n\\n\\t\\tif(ns.isRunning('scan_virus.js',serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略已执行 scan_virus.js 的目标 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(purchasedServer.includes(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略自身服务器 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.tprintf(\\\"处理目标机 %s ====> %s\\\",host,serverName); \\n \\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n \\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\t//kill\\n\\t\\t\\tns.killall(serverName);\\n\\n\\t\\t\\tvar pid = ns.exec('scan_virus.js',serverName,1,runCode);\\n\\t\\t\\tif(pid !=0)\\n\\t\\t\\t{ \\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 成功 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 失败，可能因为RAM不足 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"在目标机链式执行失败，无ROOT权限 %s ====> %s\\\",host,serverName); \\n\\t\\t} \\n\\t}\\n\\t\\n\\t\\n\\tif(host!='home')\\n\\t{\\n\\t\\tns.tprintf(\\\"============================ HACK %s  ============================ \\\",host); \\n\\t\\tns.run('hack1.js',1,host);\\n\\t\\tawait ns.sleep(1000);\\n\\t} \\n}\",\"filename\":\"scan_virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_virus.js\",\"url\":\"blob:file:///ba887678-e0ef-4cf1-8072-5c8efae1d724\"}],\"ramUsage\":7.15,\"server\":\"sigma-cosmetics\",\"_hash\":\"06a21d5c8d2cf7bf14ce9c8a911556952e8bedad9922839fbfdb96bf041a8fac\",\"moduleSequenceNumber\":1458}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"scan_virus2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"sigma-cosmetics\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":116}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"_lock.txt\",\"text\":\"12334\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.718,\"minDifficulty\":3,\"moneyAvailable\":2337628.270804667,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"68.7.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",46875000,10],\"dataMap\":{\"joesguns\":[0,0,0,21]},\"filename\":\"hack2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.38679085135882,\"onlineMoneyMade\":0,\"onlineRunningTime\":460.8099999999824,\"pid\":50,\"ramUsage\":2.2,\"server\":\"joesguns\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///e7659df8-830a-46d7-9673-e2b6362e1678\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//定义你需要指定的程序\\n//会按照数组顺序依次执行\\n//如果不存在则不会执行\\nvar utils = [\\\"BruteSSH.exe\\\",\\\"FTPCrack.exe\\\",\\\"relaySMTP.exe\\\",\\\"HTTPWorm.exe\\\",\\\"SQLInject.exe\\\",\\\"NUKE.exe\\\"];\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns  \\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.args[0];  \\n\\troot(ns,host); \\n}\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns \\n * @param host 目标主机 \\n **/\\nfunction root(ns , host)\\n{ \\n\\tns.print(\\\"尝试使用所有程序 at \\\",host);\\n\\tfor(var i in utils)\\n\\t{\\n\\t\\t runFile(ns , utils[i] , host);\\n\\t} \\n}\\n\\n/** \\n * 尝试对目标使用指定程序\\n * @param {NS} ns \\n * @param file 指定程序 \\n * @param host 目标主机 \\n **/\\nfunction runFile(ns , file , host)\\n{ \\n\\tvar flag = true;\\n\\n\\t//file 理论上应该是home拥有了就可以使用\\n\\tif(utils.includes(file) && ns.fileExists(file,'home'))\\n\\t{\\n\\t\\tns.print(\\\"尝试使用程序\\\",file);\\n\\n\\t\\tswitch(file)\\n\\t\\t{\\n\\t\\t\\tcase \\\"NUKE.exe\\\":{\\n\\t\\t\\t\\tif(isPortOpen(ns,host))\\n\\t\\t\\t\\t{\\n\\t\\t\\t \\t\\tns.nuke(host);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.tprintf(\\\"端口不满足NUKE运行条件\\\");\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"BruteSSH.exe\\\":{\\n\\t\\t\\t\\tns.brutessh(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"FTPCrack.exe\\\":{\\n\\t\\t\\t\\tns.ftpcrack(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"relaySMTP.exe\\\":{\\n\\t\\t\\t\\tns.relaysmtp(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"HTTPWorm.exe\\\":{\\n\\t\\t\\t\\tns.httpworm(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"SQLInject.exe\\\":{\\n\\t\\t\\t\\tns.sqlinject(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t{\\n\\t\\t\\t\\tflag=false; \\n\\t\\t\\t}break;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tflag=false;\\n\\t}\\n\\n\\tif(flag)\\n\\t{ \\n\\t\\tns.tprintf(\\\"[%s] run [%s] 成功\\\",host,file);  \\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprintf(\\\"[%s] run [%s] 失败\\\",host,file);   \\n\\t}\\n\\treturn flag;\\n}\\n \\n/** \\n * 目标的端口是否满足需要\\n * @param {NS} ns  \\n * @param host 目标主机 \\n **/\\nfunction isPortOpen(ns,host)\\n{ \\n\\tvar server = ns.getServer(host);\\n\\treturn server.openPortCount>=server.numOpenPortsRequired; \\n}\",\"filename\":\"root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"_hash\":\"a6d9c2c80701c3a5c6ebb6fbd95e694a4fe88093c32da6c2ec9ef380c2b1f19c\",\"moduleSequenceNumber\":117}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n *  1.需要保证拥有ROOT权限\\n *  2.需要保证目标机RAM是空的\\n * **/\\nexport async function main(ns) {\\n\\tvar target =ns.args[0];//目标主机\\n\\tvar host = ns.getHostname();//自身（有可能和目标是同一个）\\n\\n\\tvar serverMoney = ns.getServerMaxMoney(target) * 0.75;//让金钱处于最大值的75%\\n\\tvar serverTresh = ns.getServerMinSecurityLevel(target) + 5;//降低到最小安保等级\\n \\n\\tvar ramCost = ns.getScriptRam('hack2.js');\\n\\t//把目标机的RAM吃光\\n\\tvar ownRam = ns.getServerMaxRam(host);\\n\\tvar thread = Math.floor(ownRam/ramCost);\\n \\n\\tns.tprintf(\\\" *************  hack 脚本成功在 %s 中执行，攻击目标为: %s ,即将启用hack2.js\\\",ns.getHostname(),target);\\n\\t\\n\\t//在本机执行hack2.js ,对目标机进行骇入(可以是自己)\\n\\tns.spawn('hack2.js',thread,target,serverMoney,serverTresh);\\n\\n}\",\"filename\":\"hack1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack1.js\",\"url\":\"blob:file:///3f699c4a-58a6-4494-a215-e9ec34912035\"}],\"ramUsage\":4,\"server\":\"joesguns\",\"_hash\":\"eebc52030b21d177fc413efb0d38984027b9f78fc6a12c6c3a1f974724021563\",\"moduleSequenceNumber\":1476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 以指定的参数运行三大函数\\n * **/\\nexport async function main(ns) { \\n\\n\\tvar target = ns.args[0];\\n\\tvar serverMoney = ns.args[1];\\n\\tvar serverTresh = ns.args[2];  \\n\\n\\tns.tprintf(\\\"开始对 %s 执行 hack2.js , 保证资金>%s , 保证安保等级<%s\\\",target,serverMoney,serverTresh)\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target)>serverTresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target); \\n\\t\\t}\\n\\t\\telse if(ns.getServerMoneyAvailable(target)<serverMoney)\\n\\t\\t{ \\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///6afe64c7-ab10-41a1-8a57-07cc6492ff63\"}],\"ramUsage\":2.2,\"server\":\"joesguns\",\"_hash\":\"de9390fe4cda7d048019479a89954cbf5c3dfc6202d5eb06f9a0442bb352ef34\",\"moduleSequenceNumber\":1486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var require = [\\n\\t//基本工具\\n\\t\\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\n\\t//二次封装\\n\\t\\\"scan_copy.js\\\",\\n\\t\\\"scan_root.js\\\",\\n\\t\\\"scan_run_hack.js\\\",\\n\\t\\\"scan_virus.js\\\",\\n\\t\\\"scan_virus2.js\\\",\\n\\t//库函数 \\n\\t//\\\"func1.js\\\",\\n\\t];\\n\\n/**\\n *  @param {NS} ns \\n * \\n *  对周边节点拷贝需要的\\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor(var j in require)\\n\\t\\t{\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{  \\n\\t\\t\\t\\tns.tprintf(\\\"拷贝 %s ====> %s 失败，目标无ROOT权限\\\",host,serverName);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar s = require[j]; \\n\\t\\t\\tawait ns.scp(s,host,serverName); \\n\\t\\t}\\n \\n\\t\\tns.tprintf(\\\"拷贝结束 %s ====> %s \\\",host,serverName);\\n\\t\\t// ns.run(callback,1,ns.args); \\n\\t}\\n\\n}\",\"filename\":\"scan_copy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_copy.js\",\"url\":\"blob:file:///15cf5a39-ddee-4e83-b486-93e0b0be32a4\"}],\"ramUsage\":2.5,\"server\":\"joesguns\",\"_hash\":\"6f66ec531facf3571c7ebbb40d2cf81ce443af52e56feefab47378fe94a058c9\",\"moduleSequenceNumber\":1470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对本机周边所有节点进行root\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\tvar root = [];\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"对未获取ROOT权限的目标 [ %s ] 进行破解…\\\",serverName);\\n\\n\\t\\t\\tns.run(\\\"root.js\\\",1,serverName);\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"%s root权限 已获取失败\\\",serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"%s root权限 已获取\\\",serverName); \\n\\t\\t\\troot.push(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"scan_root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_root.js\",\"url\":\"blob:file:///21c5e40e-9403-42b9-a869-f441f5b475c4\"}],\"ramUsage\":2.9,\"server\":\"joesguns\",\"_hash\":\"575ec2eaa8977f12e23c92e2a73a61e0338275146af4e5b66fa920cfa6ca2001\",\"moduleSequenceNumber\":1464}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对宿主机进行hack流程\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tns.kill('hack1.js',host);\\n\\tns.exec('hack1.js',host,1,host);   \\n\\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\n\\t// var all = ns.scan();\\n\\t// for(var i in all)\\n\\t// {\\n\\t// \\tvar serverName = all[i];\\n\\t// \\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\t\\t\\n\\t// \\tif(serverName=='home')\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t// \\t\\tcontinue;\\n\\t// \\t}\\n\\n\\t// \\tif(ns.hasRootAccess(serverName))\\n\\t// \\t{\\n\\t// \\t\\t// ns.killall(serverName);\\n\\t\\t\\t\\n\\t// \\t\\tns.kill('hack1.js',serverName);\\n\\t// \\t\\tns.exec('hack1.js',serverName,1,serverName); \\n\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行成功，%s ====> %s\\\",host,serverName);\\n\\t// \\t}else\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行失败，无ROOT权限，%s ====> %s\\\",host,serverName);\\n\\t// \\t}\\n\\t// }\\n\\n}\",\"filename\":\"scan_run_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"joesguns\",\"_hash\":\"53a15f23244e3f6c9fc5544c249339574b78521a8a9371bae1e4b57086d37c6d\",\"moduleSequenceNumber\":122}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar runCode = ns.args[0]; //必须指定一个特征码,否则会无限循环\\n\\t\\n\\tif(ns.args.length == 0)\\n\\t{ \\n\\t\\tns.tprintf(\\\"params error\\\");  \\n\\t\\treturn;\\n\\t}\\n\\n\\tvar host = ns.getHostname();\\n\\n\\tif(ns.fileExists(\\\"_lock.txt\\\"))\\n\\t{\\n\\t\\tvar code = ns.read(\\\"_lock.txt\\\");\\n\\t\\tif(code == runCode)\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"锁定中 %s \\\",host);  \\n\\t\\t\\treturn;\\n\\t\\t}else\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"===============>>>> %s 未锁定 , code=%s , runCode=%s \\\",host,code,runCode);  \\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.write(\\\"_lock.txt\\\",runCode,\\\"w\\\");\\n \\n\\tns.tprintf(\\\"============================ ROOT %s  ============================ \\\",host,runCode); \\n\\tns.run(\\\"scan_root.js\\\");\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ COPY %s  ============================ \\\",host,runCode); \\n\\tns.run('scan_copy.js');\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ DIFFUSE %s  ============================ \\\",host,runCode); \\n\\tvar root = ns.scan(host);\\n\\tvar purchasedServer = ns.getPurchasedServers();\\n\\tfor(var i in root)\\n\\t{ \\n\\t\\tvar serverName = root [i];\\n\\n\\t\\tif(ns.isRunning('scan_virus.js',serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略已执行 scan_virus.js 的目标 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(purchasedServer.includes(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略自身服务器 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.tprintf(\\\"处理目标机 %s ====> %s\\\",host,serverName); \\n \\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n \\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\t//kill\\n\\t\\t\\tns.killall(serverName);\\n\\n\\t\\t\\tvar pid = ns.exec('scan_virus.js',serverName,1,runCode);\\n\\t\\t\\tif(pid !=0)\\n\\t\\t\\t{ \\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 成功 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 失败，可能因为RAM不足 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"在目标机链式执行失败，无ROOT权限 %s ====> %s\\\",host,serverName); \\n\\t\\t} \\n\\t}\\n\\t\\n\\t\\n\\tif(host!='home')\\n\\t{\\n\\t\\tns.tprintf(\\\"============================ HACK %s  ============================ \\\",host); \\n\\t\\tns.run('hack1.js',1,host);\\n\\t\\tawait ns.sleep(1000);\\n\\t} \\n}\",\"filename\":\"scan_virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_virus.js\",\"url\":\"blob:file:///ba887678-e0ef-4cf1-8072-5c8efae1d724\"}],\"ramUsage\":7.15,\"server\":\"joesguns\",\"_hash\":\"06a21d5c8d2cf7bf14ce9c8a911556952e8bedad9922839fbfdb96bf041a8fac\",\"moduleSequenceNumber\":1459}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"scan_virus2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"joesguns\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":124}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"_lock.txt\",\"text\":\"12334\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.200000000000003,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"89.1.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"6.7.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",51562500,12],\"dataMap\":{\"nectar-net\":[0,0,0,7]},\"filename\":\"hack2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67.39412926727059,\"onlineMoneyMade\":0,\"onlineRunningTime\":458.8099999999825,\"pid\":53,\"ramUsage\":2.2,\"server\":\"nectar-net\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///e7659df8-830a-46d7-9673-e2b6362e1678\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//定义你需要指定的程序\\n//会按照数组顺序依次执行\\n//如果不存在则不会执行\\nvar utils = [\\\"BruteSSH.exe\\\",\\\"FTPCrack.exe\\\",\\\"relaySMTP.exe\\\",\\\"HTTPWorm.exe\\\",\\\"SQLInject.exe\\\",\\\"NUKE.exe\\\"];\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns  \\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.args[0];  \\n\\troot(ns,host); \\n}\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns \\n * @param host 目标主机 \\n **/\\nfunction root(ns , host)\\n{ \\n\\tns.print(\\\"尝试使用所有程序 at \\\",host);\\n\\tfor(var i in utils)\\n\\t{\\n\\t\\t runFile(ns , utils[i] , host);\\n\\t} \\n}\\n\\n/** \\n * 尝试对目标使用指定程序\\n * @param {NS} ns \\n * @param file 指定程序 \\n * @param host 目标主机 \\n **/\\nfunction runFile(ns , file , host)\\n{ \\n\\tvar flag = true;\\n\\n\\t//file 理论上应该是home拥有了就可以使用\\n\\tif(utils.includes(file) && ns.fileExists(file,'home'))\\n\\t{\\n\\t\\tns.print(\\\"尝试使用程序\\\",file);\\n\\n\\t\\tswitch(file)\\n\\t\\t{\\n\\t\\t\\tcase \\\"NUKE.exe\\\":{\\n\\t\\t\\t\\tif(isPortOpen(ns,host))\\n\\t\\t\\t\\t{\\n\\t\\t\\t \\t\\tns.nuke(host);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.tprintf(\\\"端口不满足NUKE运行条件\\\");\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"BruteSSH.exe\\\":{\\n\\t\\t\\t\\tns.brutessh(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"FTPCrack.exe\\\":{\\n\\t\\t\\t\\tns.ftpcrack(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"relaySMTP.exe\\\":{\\n\\t\\t\\t\\tns.relaysmtp(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"HTTPWorm.exe\\\":{\\n\\t\\t\\t\\tns.httpworm(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"SQLInject.exe\\\":{\\n\\t\\t\\t\\tns.sqlinject(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t{\\n\\t\\t\\t\\tflag=false; \\n\\t\\t\\t}break;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tflag=false;\\n\\t}\\n\\n\\tif(flag)\\n\\t{ \\n\\t\\tns.tprintf(\\\"[%s] run [%s] 成功\\\",host,file);  \\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprintf(\\\"[%s] run [%s] 失败\\\",host,file);   \\n\\t}\\n\\treturn flag;\\n}\\n \\n/** \\n * 目标的端口是否满足需要\\n * @param {NS} ns  \\n * @param host 目标主机 \\n **/\\nfunction isPortOpen(ns,host)\\n{ \\n\\tvar server = ns.getServer(host);\\n\\treturn server.openPortCount>=server.numOpenPortsRequired; \\n}\",\"filename\":\"root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"root.js\",\"url\":\"blob:file:///648dccf7-b3f6-4cab-9a3e-0da0777fae37\"}],\"ramUsage\":4,\"server\":\"nectar-net\",\"_hash\":\"a6d9c2c80701c3a5c6ebb6fbd95e694a4fe88093c32da6c2ec9ef380c2b1f19c\",\"moduleSequenceNumber\":1481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n *  1.需要保证拥有ROOT权限\\n *  2.需要保证目标机RAM是空的\\n * **/\\nexport async function main(ns) {\\n\\tvar target =ns.args[0];//目标主机\\n\\tvar host = ns.getHostname();//自身（有可能和目标是同一个）\\n\\n\\tvar serverMoney = ns.getServerMaxMoney(target) * 0.75;//让金钱处于最大值的75%\\n\\tvar serverTresh = ns.getServerMinSecurityLevel(target) + 5;//降低到最小安保等级\\n \\n\\tvar ramCost = ns.getScriptRam('hack2.js');\\n\\t//把目标机的RAM吃光\\n\\tvar ownRam = ns.getServerMaxRam(host);\\n\\tvar thread = Math.floor(ownRam/ramCost);\\n \\n\\tns.tprintf(\\\" *************  hack 脚本成功在 %s 中执行，攻击目标为: %s ,即将启用hack2.js\\\",ns.getHostname(),target);\\n\\t\\n\\t//在本机执行hack2.js ,对目标机进行骇入(可以是自己)\\n\\tns.spawn('hack2.js',thread,target,serverMoney,serverTresh);\\n\\n}\",\"filename\":\"hack1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack1.js\",\"url\":\"blob:file:///3f699c4a-58a6-4494-a215-e9ec34912035\"}],\"ramUsage\":4,\"server\":\"nectar-net\",\"_hash\":\"eebc52030b21d177fc413efb0d38984027b9f78fc6a12c6c3a1f974724021563\",\"moduleSequenceNumber\":1483}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 以指定的参数运行三大函数\\n * **/\\nexport async function main(ns) { \\n\\n\\tvar target = ns.args[0];\\n\\tvar serverMoney = ns.args[1];\\n\\tvar serverTresh = ns.args[2];  \\n\\n\\tns.tprintf(\\\"开始对 %s 执行 hack2.js , 保证资金>%s , 保证安保等级<%s\\\",target,serverMoney,serverTresh)\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target)>serverTresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target); \\n\\t\\t}\\n\\t\\telse if(ns.getServerMoneyAvailable(target)<serverMoney)\\n\\t\\t{ \\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///6afe64c7-ab10-41a1-8a57-07cc6492ff63\"}],\"ramUsage\":2.2,\"server\":\"nectar-net\",\"_hash\":\"de9390fe4cda7d048019479a89954cbf5c3dfc6202d5eb06f9a0442bb352ef34\",\"moduleSequenceNumber\":1489}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var require = [\\n\\t//基本工具\\n\\t\\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\n\\t//二次封装\\n\\t\\\"scan_copy.js\\\",\\n\\t\\\"scan_root.js\\\",\\n\\t\\\"scan_run_hack.js\\\",\\n\\t\\\"scan_virus.js\\\",\\n\\t\\\"scan_virus2.js\\\",\\n\\t//库函数 \\n\\t//\\\"func1.js\\\",\\n\\t];\\n\\n/**\\n *  @param {NS} ns \\n * \\n *  对周边节点拷贝需要的\\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor(var j in require)\\n\\t\\t{\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{  \\n\\t\\t\\t\\tns.tprintf(\\\"拷贝 %s ====> %s 失败，目标无ROOT权限\\\",host,serverName);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar s = require[j]; \\n\\t\\t\\tawait ns.scp(s,host,serverName); \\n\\t\\t}\\n \\n\\t\\tns.tprintf(\\\"拷贝结束 %s ====> %s \\\",host,serverName);\\n\\t\\t// ns.run(callback,1,ns.args); \\n\\t}\\n\\n}\",\"filename\":\"scan_copy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_copy.js\",\"url\":\"blob:file:///15cf5a39-ddee-4e83-b486-93e0b0be32a4\"}],\"ramUsage\":2.5,\"server\":\"nectar-net\",\"_hash\":\"6f66ec531facf3571c7ebbb40d2cf81ce443af52e56feefab47378fe94a058c9\",\"moduleSequenceNumber\":1482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对本机周边所有节点进行root\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\tvar root = [];\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"对未获取ROOT权限的目标 [ %s ] 进行破解…\\\",serverName);\\n\\n\\t\\t\\tns.run(\\\"root.js\\\",1,serverName);\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"%s root权限 已获取失败\\\",serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"%s root权限 已获取\\\",serverName); \\n\\t\\t\\troot.push(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"scan_root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_root.js\",\"url\":\"blob:file:///21c5e40e-9403-42b9-a869-f441f5b475c4\"}],\"ramUsage\":2.9,\"server\":\"nectar-net\",\"_hash\":\"575ec2eaa8977f12e23c92e2a73a61e0338275146af4e5b66fa920cfa6ca2001\",\"moduleSequenceNumber\":1479}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对宿主机进行hack流程\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tns.kill('hack1.js',host);\\n\\tns.exec('hack1.js',host,1,host);   \\n\\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\n\\t// var all = ns.scan();\\n\\t// for(var i in all)\\n\\t// {\\n\\t// \\tvar serverName = all[i];\\n\\t// \\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\t\\t\\n\\t// \\tif(serverName=='home')\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t// \\t\\tcontinue;\\n\\t// \\t}\\n\\n\\t// \\tif(ns.hasRootAccess(serverName))\\n\\t// \\t{\\n\\t// \\t\\t// ns.killall(serverName);\\n\\t\\t\\t\\n\\t// \\t\\tns.kill('hack1.js',serverName);\\n\\t// \\t\\tns.exec('hack1.js',serverName,1,serverName); \\n\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行成功，%s ====> %s\\\",host,serverName);\\n\\t// \\t}else\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行失败，无ROOT权限，%s ====> %s\\\",host,serverName);\\n\\t// \\t}\\n\\t// }\\n\\n}\",\"filename\":\"scan_run_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"nectar-net\",\"_hash\":\"53a15f23244e3f6c9fc5544c249339574b78521a8a9371bae1e4b57086d37c6d\",\"moduleSequenceNumber\":130}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar runCode = ns.args[0]; //必须指定一个特征码,否则会无限循环\\n\\t\\n\\tif(ns.args.length == 0)\\n\\t{ \\n\\t\\tns.tprintf(\\\"params error\\\");  \\n\\t\\treturn;\\n\\t}\\n\\n\\tvar host = ns.getHostname();\\n\\n\\tif(ns.fileExists(\\\"_lock.txt\\\"))\\n\\t{\\n\\t\\tvar code = ns.read(\\\"_lock.txt\\\");\\n\\t\\tif(code == runCode)\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"锁定中 %s \\\",host);  \\n\\t\\t\\treturn;\\n\\t\\t}else\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"===============>>>> %s 未锁定 , code=%s , runCode=%s \\\",host,code,runCode);  \\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.write(\\\"_lock.txt\\\",runCode,\\\"w\\\");\\n \\n\\tns.tprintf(\\\"============================ ROOT %s  ============================ \\\",host,runCode); \\n\\tns.run(\\\"scan_root.js\\\");\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ COPY %s  ============================ \\\",host,runCode); \\n\\tns.run('scan_copy.js');\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ DIFFUSE %s  ============================ \\\",host,runCode); \\n\\tvar root = ns.scan(host);\\n\\tvar purchasedServer = ns.getPurchasedServers();\\n\\tfor(var i in root)\\n\\t{ \\n\\t\\tvar serverName = root [i];\\n\\n\\t\\tif(ns.isRunning('scan_virus.js',serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略已执行 scan_virus.js 的目标 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(purchasedServer.includes(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略自身服务器 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.tprintf(\\\"处理目标机 %s ====> %s\\\",host,serverName); \\n \\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n \\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\t//kill\\n\\t\\t\\tns.killall(serverName);\\n\\n\\t\\t\\tvar pid = ns.exec('scan_virus.js',serverName,1,runCode);\\n\\t\\t\\tif(pid !=0)\\n\\t\\t\\t{ \\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 成功 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 失败，可能因为RAM不足 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"在目标机链式执行失败，无ROOT权限 %s ====> %s\\\",host,serverName); \\n\\t\\t} \\n\\t}\\n\\t\\n\\t\\n\\tif(host!='home')\\n\\t{\\n\\t\\tns.tprintf(\\\"============================ HACK %s  ============================ \\\",host); \\n\\t\\tns.run('hack1.js',1,host);\\n\\t\\tawait ns.sleep(1000);\\n\\t} \\n}\",\"filename\":\"scan_virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_virus.js\",\"url\":\"blob:file:///ba887678-e0ef-4cf1-8072-5c8efae1d724\"}],\"ramUsage\":7.15,\"server\":\"nectar-net\",\"_hash\":\"06a21d5c8d2cf7bf14ce9c8a911556952e8bedad9922839fbfdb96bf041a8fac\",\"moduleSequenceNumber\":1477}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"scan_virus2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nectar-net\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":132}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"_lock.txt\",\"text\":\"12334\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":19.65,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"81.8.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"4.9.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"92.3.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",56250000,10],\"dataMap\":{\"hong-fang-tea\":[0,0,0,7]},\"filename\":\"hack2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55.79559695045294,\"onlineMoneyMade\":0,\"onlineRunningTime\":460.8099999999824,\"pid\":51,\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///e7659df8-830a-46d7-9673-e2b6362e1678\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//定义你需要指定的程序\\n//会按照数组顺序依次执行\\n//如果不存在则不会执行\\nvar utils = [\\\"BruteSSH.exe\\\",\\\"FTPCrack.exe\\\",\\\"relaySMTP.exe\\\",\\\"HTTPWorm.exe\\\",\\\"SQLInject.exe\\\",\\\"NUKE.exe\\\"];\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns  \\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.args[0];  \\n\\troot(ns,host); \\n}\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns \\n * @param host 目标主机 \\n **/\\nfunction root(ns , host)\\n{ \\n\\tns.print(\\\"尝试使用所有程序 at \\\",host);\\n\\tfor(var i in utils)\\n\\t{\\n\\t\\t runFile(ns , utils[i] , host);\\n\\t} \\n}\\n\\n/** \\n * 尝试对目标使用指定程序\\n * @param {NS} ns \\n * @param file 指定程序 \\n * @param host 目标主机 \\n **/\\nfunction runFile(ns , file , host)\\n{ \\n\\tvar flag = true;\\n\\n\\t//file 理论上应该是home拥有了就可以使用\\n\\tif(utils.includes(file) && ns.fileExists(file,'home'))\\n\\t{\\n\\t\\tns.print(\\\"尝试使用程序\\\",file);\\n\\n\\t\\tswitch(file)\\n\\t\\t{\\n\\t\\t\\tcase \\\"NUKE.exe\\\":{\\n\\t\\t\\t\\tif(isPortOpen(ns,host))\\n\\t\\t\\t\\t{\\n\\t\\t\\t \\t\\tns.nuke(host);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.tprintf(\\\"端口不满足NUKE运行条件\\\");\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"BruteSSH.exe\\\":{\\n\\t\\t\\t\\tns.brutessh(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"FTPCrack.exe\\\":{\\n\\t\\t\\t\\tns.ftpcrack(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"relaySMTP.exe\\\":{\\n\\t\\t\\t\\tns.relaysmtp(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"HTTPWorm.exe\\\":{\\n\\t\\t\\t\\tns.httpworm(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"SQLInject.exe\\\":{\\n\\t\\t\\t\\tns.sqlinject(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t{\\n\\t\\t\\t\\tflag=false; \\n\\t\\t\\t}break;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tflag=false;\\n\\t}\\n\\n\\tif(flag)\\n\\t{ \\n\\t\\tns.tprintf(\\\"[%s] run [%s] 成功\\\",host,file);  \\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprintf(\\\"[%s] run [%s] 失败\\\",host,file);   \\n\\t}\\n\\treturn flag;\\n}\\n \\n/** \\n * 目标的端口是否满足需要\\n * @param {NS} ns  \\n * @param host 目标主机 \\n **/\\nfunction isPortOpen(ns,host)\\n{ \\n\\tvar server = ns.getServer(host);\\n\\treturn server.openPortCount>=server.numOpenPortsRequired; \\n}\",\"filename\":\"root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"root.js\",\"url\":\"blob:file:///b52c5a36-83c5-4deb-9925-1dedfe824d69\"}],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"_hash\":\"a6d9c2c80701c3a5c6ebb6fbd95e694a4fe88093c32da6c2ec9ef380c2b1f19c\",\"moduleSequenceNumber\":133}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n *  1.需要保证拥有ROOT权限\\n *  2.需要保证目标机RAM是空的\\n * **/\\nexport async function main(ns) {\\n\\tvar target =ns.args[0];//目标主机\\n\\tvar host = ns.getHostname();//自身（有可能和目标是同一个）\\n\\n\\tvar serverMoney = ns.getServerMaxMoney(target) * 0.75;//让金钱处于最大值的75%\\n\\tvar serverTresh = ns.getServerMinSecurityLevel(target) + 5;//降低到最小安保等级\\n \\n\\tvar ramCost = ns.getScriptRam('hack2.js');\\n\\t//把目标机的RAM吃光\\n\\tvar ownRam = ns.getServerMaxRam(host);\\n\\tvar thread = Math.floor(ownRam/ramCost);\\n \\n\\tns.tprintf(\\\" *************  hack 脚本成功在 %s 中执行，攻击目标为: %s ,即将启用hack2.js\\\",ns.getHostname(),target);\\n\\t\\n\\t//在本机执行hack2.js ,对目标机进行骇入(可以是自己)\\n\\tns.spawn('hack2.js',thread,target,serverMoney,serverTresh);\\n\\n}\",\"filename\":\"hack1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack1.js\",\"url\":\"blob:file:///3f699c4a-58a6-4494-a215-e9ec34912035\"}],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"_hash\":\"eebc52030b21d177fc413efb0d38984027b9f78fc6a12c6c3a1f974724021563\",\"moduleSequenceNumber\":1478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 以指定的参数运行三大函数\\n * **/\\nexport async function main(ns) { \\n\\n\\tvar target = ns.args[0];\\n\\tvar serverMoney = ns.args[1];\\n\\tvar serverTresh = ns.args[2];  \\n\\n\\tns.tprintf(\\\"开始对 %s 执行 hack2.js , 保证资金>%s , 保证安保等级<%s\\\",target,serverMoney,serverTresh)\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target)>serverTresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target); \\n\\t\\t}\\n\\t\\telse if(ns.getServerMoneyAvailable(target)<serverMoney)\\n\\t\\t{ \\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///6afe64c7-ab10-41a1-8a57-07cc6492ff63\"}],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"_hash\":\"de9390fe4cda7d048019479a89954cbf5c3dfc6202d5eb06f9a0442bb352ef34\",\"moduleSequenceNumber\":1487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var require = [\\n\\t//基本工具\\n\\t\\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\n\\t//二次封装\\n\\t\\\"scan_copy.js\\\",\\n\\t\\\"scan_root.js\\\",\\n\\t\\\"scan_run_hack.js\\\",\\n\\t\\\"scan_virus.js\\\",\\n\\t\\\"scan_virus2.js\\\",\\n\\t//库函数 \\n\\t//\\\"func1.js\\\",\\n\\t];\\n\\n/**\\n *  @param {NS} ns \\n * \\n *  对周边节点拷贝需要的\\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor(var j in require)\\n\\t\\t{\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{  \\n\\t\\t\\t\\tns.tprintf(\\\"拷贝 %s ====> %s 失败，目标无ROOT权限\\\",host,serverName);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar s = require[j]; \\n\\t\\t\\tawait ns.scp(s,host,serverName); \\n\\t\\t}\\n \\n\\t\\tns.tprintf(\\\"拷贝结束 %s ====> %s \\\",host,serverName);\\n\\t\\t// ns.run(callback,1,ns.args); \\n\\t}\\n\\n}\",\"filename\":\"scan_copy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_copy.js\",\"url\":\"blob:file:///15cf5a39-ddee-4e83-b486-93e0b0be32a4\"}],\"ramUsage\":2.5,\"server\":\"hong-fang-tea\",\"_hash\":\"6f66ec531facf3571c7ebbb40d2cf81ce443af52e56feefab47378fe94a058c9\",\"moduleSequenceNumber\":1471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对本机周边所有节点进行root\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\tvar root = [];\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"对未获取ROOT权限的目标 [ %s ] 进行破解…\\\",serverName);\\n\\n\\t\\t\\tns.run(\\\"root.js\\\",1,serverName);\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"%s root权限 已获取失败\\\",serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"%s root权限 已获取\\\",serverName); \\n\\t\\t\\troot.push(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"scan_root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_root.js\",\"url\":\"blob:file:///21c5e40e-9403-42b9-a869-f441f5b475c4\"}],\"ramUsage\":2.9,\"server\":\"hong-fang-tea\",\"_hash\":\"575ec2eaa8977f12e23c92e2a73a61e0338275146af4e5b66fa920cfa6ca2001\",\"moduleSequenceNumber\":1465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对宿主机进行hack流程\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tns.kill('hack1.js',host);\\n\\tns.exec('hack1.js',host,1,host);   \\n\\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\n\\t// var all = ns.scan();\\n\\t// for(var i in all)\\n\\t// {\\n\\t// \\tvar serverName = all[i];\\n\\t// \\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\t\\t\\n\\t// \\tif(serverName=='home')\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t// \\t\\tcontinue;\\n\\t// \\t}\\n\\n\\t// \\tif(ns.hasRootAccess(serverName))\\n\\t// \\t{\\n\\t// \\t\\t// ns.killall(serverName);\\n\\t\\t\\t\\n\\t// \\t\\tns.kill('hack1.js',serverName);\\n\\t// \\t\\tns.exec('hack1.js',serverName,1,serverName); \\n\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行成功，%s ====> %s\\\",host,serverName);\\n\\t// \\t}else\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行失败，无ROOT权限，%s ====> %s\\\",host,serverName);\\n\\t// \\t}\\n\\t// }\\n\\n}\",\"filename\":\"scan_run_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"hong-fang-tea\",\"_hash\":\"53a15f23244e3f6c9fc5544c249339574b78521a8a9371bae1e4b57086d37c6d\",\"moduleSequenceNumber\":138}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar runCode = ns.args[0]; //必须指定一个特征码,否则会无限循环\\n\\t\\n\\tif(ns.args.length == 0)\\n\\t{ \\n\\t\\tns.tprintf(\\\"params error\\\");  \\n\\t\\treturn;\\n\\t}\\n\\n\\tvar host = ns.getHostname();\\n\\n\\tif(ns.fileExists(\\\"_lock.txt\\\"))\\n\\t{\\n\\t\\tvar code = ns.read(\\\"_lock.txt\\\");\\n\\t\\tif(code == runCode)\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"锁定中 %s \\\",host);  \\n\\t\\t\\treturn;\\n\\t\\t}else\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"===============>>>> %s 未锁定 , code=%s , runCode=%s \\\",host,code,runCode);  \\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.write(\\\"_lock.txt\\\",runCode,\\\"w\\\");\\n \\n\\tns.tprintf(\\\"============================ ROOT %s  ============================ \\\",host,runCode); \\n\\tns.run(\\\"scan_root.js\\\");\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ COPY %s  ============================ \\\",host,runCode); \\n\\tns.run('scan_copy.js');\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ DIFFUSE %s  ============================ \\\",host,runCode); \\n\\tvar root = ns.scan(host);\\n\\tvar purchasedServer = ns.getPurchasedServers();\\n\\tfor(var i in root)\\n\\t{ \\n\\t\\tvar serverName = root [i];\\n\\n\\t\\tif(ns.isRunning('scan_virus.js',serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略已执行 scan_virus.js 的目标 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(purchasedServer.includes(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略自身服务器 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.tprintf(\\\"处理目标机 %s ====> %s\\\",host,serverName); \\n \\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n \\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\t//kill\\n\\t\\t\\tns.killall(serverName);\\n\\n\\t\\t\\tvar pid = ns.exec('scan_virus.js',serverName,1,runCode);\\n\\t\\t\\tif(pid !=0)\\n\\t\\t\\t{ \\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 成功 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 失败，可能因为RAM不足 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"在目标机链式执行失败，无ROOT权限 %s ====> %s\\\",host,serverName); \\n\\t\\t} \\n\\t}\\n\\t\\n\\t\\n\\tif(host!='home')\\n\\t{\\n\\t\\tns.tprintf(\\\"============================ HACK %s  ============================ \\\",host); \\n\\t\\tns.run('hack1.js',1,host);\\n\\t\\tawait ns.sleep(1000);\\n\\t} \\n}\",\"filename\":\"scan_virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_virus.js\",\"url\":\"blob:file:///ba887678-e0ef-4cf1-8072-5c8efae1d724\"}],\"ramUsage\":7.15,\"server\":\"hong-fang-tea\",\"_hash\":\"06a21d5c8d2cf7bf14ce9c8a911556952e8bedad9922839fbfdb96bf041a8fac\",\"moduleSequenceNumber\":1460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"scan_virus2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"hong-fang-tea\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":140}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"_lock.txt\",\"text\":\"12334\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.3,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"39.1.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",75000000,10],\"dataMap\":{\"harakiri-sushi\":[0,0,0,7]},\"filename\":\"hack2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55.79559695045294,\"onlineMoneyMade\":0,\"onlineRunningTime\":460.8099999999824,\"pid\":52,\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///e7659df8-830a-46d7-9673-e2b6362e1678\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//定义你需要指定的程序\\n//会按照数组顺序依次执行\\n//如果不存在则不会执行\\nvar utils = [\\\"BruteSSH.exe\\\",\\\"FTPCrack.exe\\\",\\\"relaySMTP.exe\\\",\\\"HTTPWorm.exe\\\",\\\"SQLInject.exe\\\",\\\"NUKE.exe\\\"];\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns  \\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.args[0];  \\n\\troot(ns,host); \\n}\\n\\n/** \\n * 尝试对目标使用所有程序,获取ROOT权限\\n * @param {NS} ns \\n * @param host 目标主机 \\n **/\\nfunction root(ns , host)\\n{ \\n\\tns.print(\\\"尝试使用所有程序 at \\\",host);\\n\\tfor(var i in utils)\\n\\t{\\n\\t\\t runFile(ns , utils[i] , host);\\n\\t} \\n}\\n\\n/** \\n * 尝试对目标使用指定程序\\n * @param {NS} ns \\n * @param file 指定程序 \\n * @param host 目标主机 \\n **/\\nfunction runFile(ns , file , host)\\n{ \\n\\tvar flag = true;\\n\\n\\t//file 理论上应该是home拥有了就可以使用\\n\\tif(utils.includes(file) && ns.fileExists(file,'home'))\\n\\t{\\n\\t\\tns.print(\\\"尝试使用程序\\\",file);\\n\\n\\t\\tswitch(file)\\n\\t\\t{\\n\\t\\t\\tcase \\\"NUKE.exe\\\":{\\n\\t\\t\\t\\tif(isPortOpen(ns,host))\\n\\t\\t\\t\\t{\\n\\t\\t\\t \\t\\tns.nuke(host);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tns.tprintf(\\\"端口不满足NUKE运行条件\\\");\\n\\t\\t\\t\\t\\tflag = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"BruteSSH.exe\\\":{\\n\\t\\t\\t\\tns.brutessh(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"FTPCrack.exe\\\":{\\n\\t\\t\\t\\tns.ftpcrack(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"relaySMTP.exe\\\":{\\n\\t\\t\\t\\tns.relaysmtp(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"HTTPWorm.exe\\\":{\\n\\t\\t\\t\\tns.httpworm(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"SQLInject.exe\\\":{\\n\\t\\t\\t\\tns.sqlinject(host);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t{\\n\\t\\t\\t\\tflag=false; \\n\\t\\t\\t}break;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tflag=false;\\n\\t}\\n\\n\\tif(flag)\\n\\t{ \\n\\t\\tns.tprintf(\\\"[%s] run [%s] 成功\\\",host,file);  \\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprintf(\\\"[%s] run [%s] 失败\\\",host,file);   \\n\\t}\\n\\treturn flag;\\n}\\n \\n/** \\n * 目标的端口是否满足需要\\n * @param {NS} ns  \\n * @param host 目标主机 \\n **/\\nfunction isPortOpen(ns,host)\\n{ \\n\\tvar server = ns.getServer(host);\\n\\treturn server.openPortCount>=server.numOpenPortsRequired; \\n}\",\"filename\":\"root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"root.js\",\"url\":\"blob:file:///648dccf7-b3f6-4cab-9a3e-0da0777fae37\"}],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"_hash\":\"a6d9c2c80701c3a5c6ebb6fbd95e694a4fe88093c32da6c2ec9ef380c2b1f19c\",\"moduleSequenceNumber\":1467}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n *  1.需要保证拥有ROOT权限\\n *  2.需要保证目标机RAM是空的\\n * **/\\nexport async function main(ns) {\\n\\tvar target =ns.args[0];//目标主机\\n\\tvar host = ns.getHostname();//自身（有可能和目标是同一个）\\n\\n\\tvar serverMoney = ns.getServerMaxMoney(target) * 0.75;//让金钱处于最大值的75%\\n\\tvar serverTresh = ns.getServerMinSecurityLevel(target) + 5;//降低到最小安保等级\\n \\n\\tvar ramCost = ns.getScriptRam('hack2.js');\\n\\t//把目标机的RAM吃光\\n\\tvar ownRam = ns.getServerMaxRam(host);\\n\\tvar thread = Math.floor(ownRam/ramCost);\\n \\n\\tns.tprintf(\\\" *************  hack 脚本成功在 %s 中执行，攻击目标为: %s ,即将启用hack2.js\\\",ns.getHostname(),target);\\n\\t\\n\\t//在本机执行hack2.js ,对目标机进行骇入(可以是自己)\\n\\tns.spawn('hack2.js',thread,target,serverMoney,serverTresh);\\n\\n}\",\"filename\":\"hack1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack1.js\",\"url\":\"blob:file:///3f699c4a-58a6-4494-a215-e9ec34912035\"}],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"_hash\":\"eebc52030b21d177fc413efb0d38984027b9f78fc6a12c6c3a1f974724021563\",\"moduleSequenceNumber\":1480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 以指定的参数运行三大函数\\n * **/\\nexport async function main(ns) { \\n\\n\\tvar target = ns.args[0];\\n\\tvar serverMoney = ns.args[1];\\n\\tvar serverTresh = ns.args[2];  \\n\\n\\tns.tprintf(\\\"开始对 %s 执行 hack2.js , 保证资金>%s , 保证安保等级<%s\\\",target,serverMoney,serverTresh)\\n\\n\\twhile(true)\\n\\t{\\n\\t\\tif(ns.getServerSecurityLevel(target)>serverTresh)\\n\\t\\t{\\n\\t\\t\\tawait ns.weaken(target); \\n\\t\\t}\\n\\t\\telse if(ns.getServerMoneyAvailable(target)<serverMoney)\\n\\t\\t{ \\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack2.js\",\"url\":\"blob:file:///6afe64c7-ab10-41a1-8a57-07cc6492ff63\"}],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"_hash\":\"de9390fe4cda7d048019479a89954cbf5c3dfc6202d5eb06f9a0442bb352ef34\",\"moduleSequenceNumber\":1488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var require = [\\n\\t//基本工具\\n\\t\\\"root.js\\\",\\\"hack1.js\\\",\\\"hack2.js\\\",\\n\\t//二次封装\\n\\t\\\"scan_copy.js\\\",\\n\\t\\\"scan_root.js\\\",\\n\\t\\\"scan_run_hack.js\\\",\\n\\t\\\"scan_virus.js\\\",\\n\\t\\\"scan_virus2.js\\\",\\n\\t//库函数 \\n\\t//\\\"func1.js\\\",\\n\\t];\\n\\n/**\\n *  @param {NS} ns \\n * \\n *  对周边节点拷贝需要的\\n **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor(var j in require)\\n\\t\\t{\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{  \\n\\t\\t\\t\\tns.tprintf(\\\"拷贝 %s ====> %s 失败，目标无ROOT权限\\\",host,serverName);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar s = require[j]; \\n\\t\\t\\tawait ns.scp(s,host,serverName); \\n\\t\\t}\\n \\n\\t\\tns.tprintf(\\\"拷贝结束 %s ====> %s \\\",host,serverName);\\n\\t\\t// ns.run(callback,1,ns.args); \\n\\t}\\n\\n}\",\"filename\":\"scan_copy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_copy.js\",\"url\":\"blob:file:///15cf5a39-ddee-4e83-b486-93e0b0be32a4\"}],\"ramUsage\":2.5,\"server\":\"harakiri-sushi\",\"_hash\":\"6f66ec531facf3571c7ebbb40d2cf81ce443af52e56feefab47378fe94a058c9\",\"moduleSequenceNumber\":1472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对本机周边所有节点进行root\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tvar all = ns.scan();\\n\\tvar root = [];\\n\\tfor(var i in all)\\n\\t{\\n\\t\\tvar serverName = all[i];\\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"对未获取ROOT权限的目标 [ %s ] 进行破解…\\\",serverName);\\n\\n\\t\\t\\tns.run(\\\"root.js\\\",1,serverName);\\n\\t\\t\\tif(!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"%s root权限 已获取失败\\\",serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"%s root权限 已获取\\\",serverName); \\n\\t\\t\\troot.push(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"scan_root.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_root.js\",\"url\":\"blob:file:///21c5e40e-9403-42b9-a869-f441f5b475c4\"}],\"ramUsage\":2.9,\"server\":\"harakiri-sushi\",\"_hash\":\"575ec2eaa8977f12e23c92e2a73a61e0338275146af4e5b66fa920cfa6ca2001\",\"moduleSequenceNumber\":1466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns \\n * 对宿主机进行hack流程\\n * **/\\nexport async function main(ns) { \\n\\tvar host = ns.getHostname();\\n\\tns.kill('hack1.js',host);\\n\\tns.exec('hack1.js',host,1,host);   \\n\\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\n\\t// var all = ns.scan();\\n\\t// for(var i in all)\\n\\t// {\\n\\t// \\tvar serverName = all[i];\\n\\t// \\tns.tprintf(\\\"hack流程 开始执行 %s ====> %s\\\",host,serverName);\\n\\t\\t\\n\\t// \\tif(serverName=='home')\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t// \\t\\tcontinue;\\n\\t// \\t}\\n\\n\\t// \\tif(ns.hasRootAccess(serverName))\\n\\t// \\t{\\n\\t// \\t\\t// ns.killall(serverName);\\n\\t\\t\\t\\n\\t// \\t\\tns.kill('hack1.js',serverName);\\n\\t// \\t\\tns.exec('hack1.js',serverName,1,serverName); \\n\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行成功，%s ====> %s\\\",host,serverName);\\n\\t// \\t}else\\n\\t// \\t{\\n\\t// \\t\\tns.tprintf(\\\"hack流程 执行失败，无ROOT权限，%s ====> %s\\\",host,serverName);\\n\\t// \\t}\\n\\t// }\\n\\n}\",\"filename\":\"scan_run_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.45,\"server\":\"harakiri-sushi\",\"_hash\":\"53a15f23244e3f6c9fc5544c249339574b78521a8a9371bae1e4b57086d37c6d\",\"moduleSequenceNumber\":146}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar runCode = ns.args[0]; //必须指定一个特征码,否则会无限循环\\n\\t\\n\\tif(ns.args.length == 0)\\n\\t{ \\n\\t\\tns.tprintf(\\\"params error\\\");  \\n\\t\\treturn;\\n\\t}\\n\\n\\tvar host = ns.getHostname();\\n\\n\\tif(ns.fileExists(\\\"_lock.txt\\\"))\\n\\t{\\n\\t\\tvar code = ns.read(\\\"_lock.txt\\\");\\n\\t\\tif(code == runCode)\\n\\t\\t{ \\n\\t\\t\\tns.tprintf(\\\"锁定中 %s \\\",host);  \\n\\t\\t\\treturn;\\n\\t\\t}else\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"===============>>>> %s 未锁定 , code=%s , runCode=%s \\\",host,code,runCode);  \\n\\t\\t}\\n\\t}\\n\\n\\tawait ns.write(\\\"_lock.txt\\\",runCode,\\\"w\\\");\\n \\n\\tns.tprintf(\\\"============================ ROOT %s  ============================ \\\",host,runCode); \\n\\tns.run(\\\"scan_root.js\\\");\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ COPY %s  ============================ \\\",host,runCode); \\n\\tns.run('scan_copy.js');\\n\\tawait ns.sleep(1000);\\n \\n\\tns.tprintf(\\\"============================ DIFFUSE %s  ============================ \\\",host,runCode); \\n\\tvar root = ns.scan(host);\\n\\tvar purchasedServer = ns.getPurchasedServers();\\n\\tfor(var i in root)\\n\\t{ \\n\\t\\tvar serverName = root [i];\\n\\n\\t\\tif(ns.isRunning('scan_virus.js',serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略已执行 scan_virus.js 的目标 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif(purchasedServer.includes(serverName))\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略自身服务器 %s ====> %s\\\",host,serverName);  \\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.tprintf(\\\"处理目标机 %s ====> %s\\\",host,serverName); \\n \\n\\t\\tif(serverName=='home')\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"忽略 %s ====> home\\\",host);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n \\n\\t\\tif(ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\t//kill\\n\\t\\t\\tns.killall(serverName);\\n\\n\\t\\t\\tvar pid = ns.exec('scan_virus.js',serverName,1,runCode);\\n\\t\\t\\tif(pid !=0)\\n\\t\\t\\t{ \\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 成功 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.tprintf(\\\"在目标机链式执行 失败，可能因为RAM不足 %s ====> %s\\\",host,serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tns.tprintf(\\\"在目标机链式执行失败，无ROOT权限 %s ====> %s\\\",host,serverName); \\n\\t\\t} \\n\\t}\\n\\t\\n\\t\\n\\tif(host!='home')\\n\\t{\\n\\t\\tns.tprintf(\\\"============================ HACK %s  ============================ \\\",host); \\n\\t\\tns.run('hack1.js',1,host);\\n\\t\\tawait ns.sleep(1000);\\n\\t} \\n}\",\"filename\":\"scan_virus.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan_virus.js\",\"url\":\"blob:file:///ba887678-e0ef-4cf1-8072-5c8efae1d724\"}],\"ramUsage\":7.15,\"server\":\"harakiri-sushi\",\"_hash\":\"06a21d5c8d2cf7bf14ce9c8a911556952e8bedad9922839fbfdb96bf041a8fac\",\"moduleSequenceNumber\":1461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"scan_virus2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"harakiri-sushi\",\"_hash\":\"3918a7cf51a2a8260dc6ec6c237c0ab883757569a2e1ae609d264a706a1a60ab\",\"moduleSequenceNumber\":148}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"_lock.txt\",\"text\":\"12334\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.3,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"19.3.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"59.3.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"88.1.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":67106110,\"moneyMax\":1677652750,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":195,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"0.6.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":57128184,\"moneyMax\":1428204600,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":268,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"70.6.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"47.3.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":481,\"serverGrowth\":33}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"75.4.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"69.1.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":728,\"serverGrowth\":46}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"33.2.0.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":505,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"17.5.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":357,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"95.9.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":215,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"90.4.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":523,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"83.5.4.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"92.2.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"12.5.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":13,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":34.061,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":51.7,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"find\":\"scan-analyze\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"8","AllGangsSave":"","LastExportBonus":"0","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}